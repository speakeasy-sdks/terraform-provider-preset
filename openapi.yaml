openapi: 3.0.0
info:
  title: Preset API
  description: >-
    Welcome to the Preset API Collection.


    ## Overview


    The Preset REST API is a powerful feature that provides access to core
    functional aspects of both Preset Manager and Superset.


    The API supports the following areas of Preset:


    *   User and Team Management

    *   Workspace Management

    *   Connection and Data Management

    *   Visualization Management

    *   Permissions Management \[Beta\]
        

    This documentation lists the most relevant endpoints across all of the above
    functional areas of Preset.


    ## Authentication


    ### Generate an API Key


    To generate an API key, from the Preset Manager screen (after log-in), hover
    your cursor over the initials icon and, in the sub-menu, select Manage User
    Settings.


    ![](https://i.ibb.co/D1xHc92/api1.png)


    In the *API Keys* section, select **\+ Generate New API Key**


    ![](https://i.ibb.co/LRWp7HC/api2.png)


    The *Generate a New API Key* panel appears.


    In the **Key Title** field, enter a name for the new API key.


    In the **Key Description** field, enter a brief descripton of the API key.


    Select **Submit**.


    ![](https://i.ibb.co/cC0H4mY/api3.png)


    The **Token** field will automatically populate with a generated token.


    Likewise, the **Secret** field will automatically populate with a secret.


    ![](https://i.ibb.co/8smp5pZ/api5.png)


    *Reminder: Safeguard the Secret**Please take a moment to select the Copy
    icon and then safely store it.*


    When ready, select **OK**.


    ![](https://i.ibb.co/LdNDGNp/api6.png)


    The newly-created API key appears in the *API Keys* section.


    By default, the API key will be activated — to deactivate, toggle the
    **Active** slider to the off position.


    To delete an API key, select the trash bin icon.


    ### Using the Postman Collection


    All requests on this collection inherit the **token** specified on the
    **Preset API** collection.


    To authenticate:


    1.  Click on the **Preset API Collection**.

    2.  Navigate to the **Variables** tab.

    3.  Provide your **API Token** on the `APITokenName` current value.

    4.  Provide the **API Token Secret** on the `APITokenSecret` current value.
        

    These would be used to generate a **JWT Token** that's stored as a **Global
    Variable**.


    There's a script defined on this collection, that is always executed before
    any request. The script basically checks if there's a valid **JWT Token**
    and tries to generate one/refresh it if needed.


    * * *


    ### Manually using the API


    Use the **Get a JWT Token** request to generate a `JWT Token.`
  version: 1.0.0
servers:
  - url: https://api.app.preset.io
  - url: https://manage.app.preset.io
  - url: https://{{workspaceslug}}.{{workspaceregion}}.app.preset.io
  - url: http://{{workspaceslug}}.{{workspaceregion}}.app.preset.io
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
security:
  - bearerAuth: []
tags:
  - name: Authentication
    description: >-
      API to authenticate and get a JWT token to interact with the
      Preset/Superset APIs.
  - name: Preset Manager APIs
    description: >-
      Use Preset Manager APIs to manage your Team, Workspaces, Embedded
      configurations and also Permissions.
  - name: Preset Manager APIs > Teams
    description: APIs to manage your Preset team.
  - name: Preset Manager APIs > Workspaces
    description: APIs to manage your Workspaces.
  - name: Preset Manager APIs > Permissions
    description: |-
      APIs to manage permissions on the Workspace level.

      Note that all Permission APIs require **Team Admin** permission.
  - name: Preset Manager APIs > Embedded
    description: APIs associated with the Embedded functionality.
  - name: Superset APIs (Open Source)
    description: >-
      Superset APIs can be used to interact with assets in your Workspaces. Note
      that Superset APIs are contributed from the Open Source Community, so they
      are subject to change without previous notification. Please keep this in
      mind when working with them.
  - name: Superset APIs (Open Source) > Databases
    description: APIs to manage your database connections.
  - name: Superset APIs (Open Source) > Datasets
    description: APIs to manage your datasets.
  - name: Superset APIs (Open Source) > Charts
    description: APIs to manage Charts on your Workspace.
  - name: Superset APIs (Open Source) > Dashboards
    description: APIs to manage your Dashboards.
  - name: Superset APIs (Open Source) > SQL Lab
  - name: Superset APIs (Open Source) > Annotation Layers
    description: API to manage your Annotation Layers.
  - name: Superset APIs (Open Source) > Alerts & Reports
    description: APIs to manage your Alerts & Reports.
  - name: Superset APIs (Open Source) > Queries
  - name: Superset APIs (Open Source) > Assets
    description: >-
      APIs to export/import an `assets` ZIP file from the Workspace, which
      includes all:


      *   databases.

      *   datasets.

      *   charts.

      *   saved queries.
paths:
  /v1/auth/:
    post:
      tags:
        - Authentication
      summary: Get a JWT Token
      description: >-
        To interact with the Preset API, it's required to generate an API Key,
        that's used to generate a JWT token.


        1. Generate an API Key on the Preset Manager UI. Refer to [our
        documentation](https://docs.preset.io/docs/the-preset-api).

        2. Copy the API `token` and `secret`.
            

        Replace in the body:


        - `{{APIToken}}` with the `token` from the UI.

        - `{{APISecret}}` with the `secret` from the UI.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                name: '{{APIToken}}'
                secret: '{{APISecret}}'
      security: []
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/:
    get:
      tags:
        - Preset Manager APIs > Teams
      summary: Get Preset Teams
      description: Retrieves all Preset teams the user has access to.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}:
    put:
      tags:
        - Preset Manager APIs > Teams
      summary: Update Team Title
      description: >-
        ###### _Requires admin permission._


        Updates the Team title.


        Replace in the URL:


        - `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
            

        Replace in the Body:


        - `{{NewTeamTitle}}` by the new title you want to set.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: '{{NewTeamTitle}}'
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}/memberships:
    get:
      tags:
        - Preset Manager APIs > Teams
      summary: Get Team Members
      description: >-
        ###### _Requires admin permission._


        Gets all members of the Team.


        Replace in the URL:


        - `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}/memberships/{UserID}:
    patch:
      tags:
        - Preset Manager APIs > Teams
      summary: Change User Role
      description: >-
        ###### _Requires admin permission._


        Changes a user's Team role.


        Replace in the URL:


        - `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.

        - `{{UserID}}`with the `id` retrieved using the **Get Team Members**
        endpoint.
            

        Replace in the Body:


        - `{{RoleID}}` with the desired role:
            - Use **`2`** for **User**.
            - Use **`1`** for **Admin**.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"team_role_id\": {{RoleID}}\r\n}"
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
        - name: UserID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Preset Manager APIs > Teams
      summary: Delete a Team Member
      description: >-
        ###### _Requires admin permission._


        Deletes a Team member.


        Replace in the URL:


        - `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.

        - `{{UserID}}`with the `id` retrieved using the **Get Team Members**
        endpoint.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
        - name: UserID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}/invites:
    post:
      tags:
        - Preset Manager APIs > Teams
      summary: Create a Team Invite
      description: >-
        ###### *Requires admin permission.*


        Creates a team invitation, sent via email.


        Replace in the URL:


        *   `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
            

        Replace in the Body:


        *   `{{RoleID}}` with the desired role:
            *   Use **`2`** for **User**.
            *   Use **`1`** for **Admin**.
        *   `{{Email}}` with the user's email address.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"team_role_id\": {{RoleID}},\r\n    \"email\": \"{{Email}}\"\r\n}"
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    get:
      tags:
        - Preset Manager APIs > Teams
      summary: Get Pending Team Invites
      description: >-
        ###### *Requires admin permission.*


        Gets all pending team invitations.


        Replace in the URL:


        *   `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}/invites/many:
    post:
      tags:
        - Preset Manager APIs > Teams
      summary: Create Multiple Team Invites
      description: >-
        ###### *Requires admin permission.*


        Creates multiple team invitations.


        Replace in the URL:


        *   `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
            

        Replace in the body:


        *   `{{RoleID}}` with the desired role:
            *   Use **`2`** for **User**.
            *   Use **`1`** for **Admin**.
        *   `{{Email}}, {{Email2}}...` with the users' email addresses.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"invites\": [\r\n        {\r\n            \"team_role_id\": {{RoleID}},\r\n            \"email\": \"{{Email}}\"\r\n        },\r\n        {\r\n            \"team_role_id\": {{RoleID}},\r\n            \"email\": \"{{Email2}}\"\r\n        }\r\n    ]\r\n}"
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}/invites/resend/{InviteID}:
    post:
      tags:
        - Preset Manager APIs > Teams
      summary: Resend Invite
      description: >-
        Resends a pending Team invitation.


        Replace in the URL:


        *   `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`
            

        *   `{{InviteID}}`with the `id` retrieved through the API using the
        **Get Pending Team Invites** endpoint.
      requestBody:
        content: {}
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
        - name: InviteID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}/invites/{InviteID}:
    delete:
      tags:
        - Preset Manager APIs > Teams
      summary: Delete Pending Invite
      description: >-
        ###### *Requires admin permission.*


        Deletes a Team invitation.


        Replace in the URL:


        *   `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
            

        *   `{{InviteID}}`with the `id` retrieved through the API using the
        **Get Pending Team Invites** endpoint.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
        - name: InviteID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}/workspaces:
    get:
      tags:
        - Preset Manager APIs > Workspaces
      summary: Get Workspaces from a Team
      description: >-
        Gets all Workspaces from the Team.


        Replace in the URL:


        *   `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Preset Manager APIs > Workspaces
      summary: Create Workspace for a Team
      description: >-
        ###### *Requires admin permission.*


        Creates a new Workspace on the Team.


        Replace in the URL:


        *   `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
            

        Replace in the Body:


        *   `{{NewWorkspaceTitle}}` by the title of the New Workspace you want
        to create.

        *   `{{NewWorkspaceRegion}}` with the region that the Workspace should
        be created - refer to below table:
            

        | Location | `NewWorkspaceRegion` |

        | --- | --- |

        | **US East Cost** | `us-east-1` |

        | **US West Coast** | `us-west-2` |

        | **Europe** | `eu-north-1` |

        | **Asia-Pacific** | `ap-northeast-1` |
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                title: '{{NewWorkspaceTitle}}'
                region: '{{NewWorkspaceRegion}}'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}/workspaces/{WorkspaceID}/memberships:
    get:
      tags:
        - Preset Manager APIs > Workspaces
      summary: Get Workspace Users and Roles
      description: >-
        Gets Users and their Workspace Roles from the Workspace.


        Replace in the URL:


        *   `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
            

        *   `{{WorkspaceID}}` with the `id` retrieved through the API with the
        **Get Workspaces from a Team** endpoint.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
        - name: WorkspaceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}/workspaces/{WorkspaceID}/membership:
    put:
      tags:
        - Preset Manager APIs > Workspaces
      summary: Change Workspace Role
      description: >-
        Changes a user's Workspace Role.


        Replace in the URL:


        - `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
            

        - `{{WorkspaceID}}` with the `id` retrieved through the API with the
        **Get Workspaces from a Team** endpoint.
            

        Replace in the body:


        - `{{UserID}}`with the `id` retrieved using the **Get Team Members**
        endpoint.
            

        - `{{RoleIdentifier}}`with one of the the `role_identifier` below,
        wrapped in double quotes:
            

        | **Workspace Role** | **role_identifier** |

        | --- | --- |

        | Workspace Admin | "Admin" |

        | Primary Contributor | "PresetAlpha" |

        | Secondary Contributor | "PresetBeta" |

        | Limited Contributor | "PresetGamma" |

        | Viewer | "PresetReportsOnly" |

        | Dashboard Viewer | "PresetDashboardsOnly" |

        | No Access | "PresetNoAccess" |


        Each Role Identifier corresponds to a specific Workspace Role. As a
        reminder, the access restrictions for each Workspace Role can be found
        [in our
        documentation](https://docs.preset.io/docs/data-access-roles-at-preset).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"role_identifier\": {{RoleIdentifier}}, \r\n    \"user_id\": {{UserID}}\r\n}"
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
        - name: WorkspaceID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}/permissions/resources:
    get:
      tags:
        - Preset Manager APIs > Permissions
      summary: Get Resources
      description: >-
        ###### _Requires Team Admin permission._


        List all resources from a team.


        Replace in the URL:


        - `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
            

        Note that the query parameters are optional and very useful to retrieve
        the desired data:


        - `workspace_name` can be used to filter for permissions only applied to
        a particular Workspace.

        - `resource_type` can be used to filter for:
            - `database` to list databases
            - `database_schema` to list schemas
            - `datasource` to list DAR permission reference of a dataset (not the dataset itself)
            - `dataset` to list datasets
            - `data_access_role` to list DARs
            - `row_level_security` to list RLSs
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}/permissions:
    get:
      tags:
        - Preset Manager APIs > Permissions
      summary: Get Permissions
      description: "###### _Requires Team Admin permission._\n\nList all permissions from a team.\n\nReplace in the URL:\n\n- `{{TeamSlug}}`\_with the\_`name`\_retrieved through the API (using the\_**Get Preset Teams**\_endpoint). Alternatively, access the team administration through the UI, and get the\_`{{TeamSlug}}`\_from the URL ->\_`https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n    \n\nNote that the query parameters are optional and very useful to retrieve the desired data:\n\n- `workspace_name` can be used to filter for permissions only applied to a particular Workspace.\n- `permission_type` can be used to filter for only `data_access_role`, or `row_level_security`.\n- `grantee_identifier` can be used to filter for all permissions included in a DAR (`dar:{{DAR NAME}}`), or all permissions applied to a user (`username`)."
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}/permissions/:
    post:
      tags:
        - Preset Manager APIs > Permissions
      summary: Create Row Level Security
      description: >-
        ###### _Requires Team Admin permission._


        Creates a Row Level Security (RLS).


        Replace in the URL:


        - `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
            

        Replace in the body:


        - `{{DARName1}}` with the DAR name you want to associated with this RLS
        (also for `{{DARName2}}` and so on). You can get a list of availabe DARs
        using the **Get Permissions** endpoint. Note that you would use the
        **display name** (without `dar:`).

        - `{{RLSName}}` with the name of your RLS.

        - `{{RLSClause}}` with the SQL syntax for the filter to be applied.

        - `{{RLSFilterType}}` with `Regular` or `Base`.

        - `{{RLSGroupKey}}` with the desired group key.

        - `{{ResourceName}}` with the datasource name. You can get a list of
        available options using the **Get Resources** endpoint (filtering for
        `&resource_type=datasource`).

        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).
            

        Please note:


        - _**Grantee list for RLS permissions create/update is limited to 100
        users in total (API will respond with 400 if over the limit)**_
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: row_level_security
                grantees:
                  - type: ROLE
                    identifier: '{{DARName1}}'
                  - type: ROLE
                    identifier: '{{DARName2}}'
                acl:
                  rls:{{RLSName}}:
                    config:
                      clause: '{{RLSClause}}'
                      filter_type: '{{RLSFilterType}}'
                      group_key: '{{RLSGroupKey}}'
                    grants:
                      - resource: '{{ResourceName}}'
                        action: filter
                workspace_name: '{{WorkspaceSlug}}'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}/permissions/{PermissionName}:
    patch:
      tags:
        - Preset Manager APIs > Permissions
      summary: Update Row Level Security
      description: >-
        ###### _Requires Team Admin permission._


        Updates an existing Row Level Security (RLS).


        Replace in the URL:


        - `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.

        - `{{PermissionName}}` with the `name` retrieved via the **Get
        Permissions** API.
            

        Note that the payload has to be complete - you can't remove the
        `grantees`.


        Replace in the body:


        - `{{DARName1}}` with the DAR name you want to associated with this RLS
        (also for `{{DARName2}}` and so on). You can get a list of availabe DARs
        using the **Get Permissions** endpoint. Note that you would use the
        **display name** (without `dar:`).

        - `{{RLSName}}` with the name of your RLS.

        - `{{RLSClause}}` with the SQL syntax for the filter to be applied.

        - `{{RLSFilterType}}` with `Regular` or `Base`.

        - `{{RLSGroupKey}}` with the desired group key.

        - `{{ResourceName}}` with the datasource name. You can get a list of
        available options using the **Get Resources** endpoint (filtering for
        `&resource_type=datasource`).

        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).
            

        _Please note:_


        - _**Grantee list for RLS permissions create/update is limited to 100
        users in total (API will respond with 400 if over the limit)**_
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                type: row_level_security
                grantees:
                  - type: ROLE
                    identifier: '{{DARName1}}'
                  - type: ROLE
                    identifier: '{{DARName2}}'
                acl:
                  rls:{{RLSName}}:
                    config:
                      clause: '{{RLSClause}}'
                      filter_type: '{{RLSFilterType}}'
                      group_key: '{{RLSGroupKey}}'
                    grants:
                      - resource: '{{ResourceName}}'
                        action: filter
                workspace_name: '{{WorkspaceSlug}}'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
        - name: PermissionName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Preset Manager APIs > Permissions
      summary: Delete Row Level Security
      description: "###### _Requires Team Admin permission._\n\nDeletes a Row Level Security (RLS).\n\nReplace in the URL:\n\n- `{{TeamSlug}}`\_with the\_`name`\_retrieved through the API (using the\_**Get Preset Teams**\_endpoint). Alternatively, access the team administration through the UI, and get the\_`{{TeamSlug}}`\_from the URL ->\_`https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.\n- `{{PermissionName}}`\_with the\_`name`\_retrieved via the\_**Get Permissions**\_API."
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
        - name: PermissionName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/teams/{TeamSlug}/permissions/{PermissionName}/grantees:
    post:
      tags:
        - Preset Manager APIs > Permissions
      summary: Add Grantees to existing Permission
      description: >-
        ###### _Requires Team Admin permission._


        Adds Grantee(s) to an existing Permission (DAR or RLS).


        Replace in the URL:


        - `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.

        - `{{PermissionName}}` with the `name` retrieved via the **Get
        Permissions** API.
            

        Replace in the body:


        - `{{GranteeType}}` with:
            - `USER` to add existing user to DARs.
            - `INVITEE` to add pending user to DARs
            - `ROLE` to add DAR to RLS.
        - `{{GranteeIdentifier}}` with:
            - `username` when adding users to DAR. You can get a list of `usernames` with the **Get Team Members** API. For pending users you can use their email.
            - `DAR Name` when adding DAR to RLS. You can get a list of availabe DARs using the **Get Permissions** endpoint. Note that you would use the **display name** (without `dar:`).

        Please note:


        - _**Max number of grantees to be appended per request is 100.**_

        - _**Duplicate grantees will be ignored.**_
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                grantees:
                  - type: '{{GranteeType}}'
                    identifier: '{{GranteeIdentifier}}'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
        - name: PermissionName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Preset Manager APIs > Permissions
      summary: Delete Grantee from existing Permission
      description: >-
        ###### _Requires Team Admin permission._


        Removes Grantee(s) from an existing Permission (DAR or RLS).


        Replace in the URL:


        - `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.

        - `{{PermissionName}}` with the `name` retrieved via the **Get
        Permissions** API.
            

        Replace in the body:


        - `{{GranteeType}}` with:
            - `USER` to add users to DARs.
            - `ROLE` to add DAR to RLS.
        - `{{GranteeIdentifier}}` with:
            - `username` when adding users to DAR. You can get a list of `usernames` with the **Get Team Members** API.
            - `DAR Name` when adding DAR to RLS. You can get a list of availabe DARs using the **Get Permissions** endpoint. Note that you would use the **display name** (without `dar:`).
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
        - name: PermissionName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/teams/{TeamSlug}/workspaces/{WorkspaceSlug}/guest-token/:
    post:
      tags:
        - Preset Manager APIs > Embedded
      summary: Create a new Guest Token
      description: >-
        Creates a new Guest Token to be used with Embedded.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{TeamSlug}}` with the `name` retrieved through the API (using the
        **Get Preset Teams** endpoint). Alternatively, access the team
        administration through the UI, and get the `{{TeamSlug}}` from the URL
        -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
            

        For instructions on how to populate the body, refer to [our
        documentation](https://preset-io.github.io/embedded-beta-docs/v1).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                user:
                  username: '{{username}}'
                  first_name: '{{firstName}}'
                  last_name: '{{lastName}}'
                resources:
                  - type: dashboard
                    id: '{{EmbeddedDashboardID}}'
                rls: []
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: TeamSlug
          in: path
          schema:
            type: string
          required: true
        - name: WorkspaceSlug
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/database:
    get:
      tags:
        - Superset APIs (Open Source) > Databases
      summary: Get all Database Connections from a Workspace
      description: >-
        Gets the databases connected to your Workspace.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        Note that this endpoint returns 20 results by default. You can return up
        to 100 results at a time and use pagination by adding the following
        query parameters:


        ```

        ?q=(page_size:{{PageSize}},page:{{Page}})


        ```


        Replace:


        - `{{PageSize}}` with the desired size (min `1` max `100`).

        - `{{Page}}` with the page number (useful when the total count >
        `{{PageSize}}` - min `0`).
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Superset APIs (Open Source) > Databases
      summary: Create a Database Connection
      description: >-
        Creates a new database connection on the Workspace.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        Replace on the body:


        - `boolean` with either `true` or `false` to enable/disable the
        connection settings.

        - `{{DBConnectionName}}` with the desired DB connection display name.

        - `{{SQLAlchemyURI}}` with the [connection
        string](https://docs.preset.io/docs/uri-connection-strings) to the
        database.

        - `{{ExtraConfiguration}}` _(optional)_ with any addifional
        configuration (like **Engine Parameters**). For example:
            

        ```

        {\"engine_params\": {\"connect_args\": {\"http_path\":
        \"/sql/1.0/warehouses/********\"}}}


        ```


        **Note:** You need to escape quotes (`"`) and other special characters
        using `\` on all body fields.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                allow_csv_upload: boolean
                allow_ctas: boolean
                allow_cvas: boolean
                allow_dml: boolean
                allow_multi_schema_metadata_fetch: boolean
                allow_run_async: boolean
                cache_timeout: 0
                database_name: '{{DBConnectionName}}'
                expose_in_sqllab: boolean
                extra: '{{ExtraConfiguration}}'
                impersonate_user: boolean
                sqlalchemy_uri: '{{SQLAlchemyURI}}'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/database/{DatabaseID}:
    get:
      tags:
        - Superset APIs (Open Source) > Databases
      summary: Get a Database Connection
      description: >-
        Get a specific Database Connection from a Workspace.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{DatabaseID}}` with the Database Connection `id` retrieved from the
        **Get All Database Connections from a Workspace** endpoint.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: DatabaseID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Superset APIs (Open Source) > Databases
      summary: Update a Database Connection
      description: >-
        Updates an existing Database Connection.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).
            
        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{DatabaseID}}` with the Database Connection `id` retrieved from the
        **Get All Database Connections from a Workspace** endpoint.
            

        In the body:


        Include the keys you would like to update. Refer to the **Create a
        Database Connection** payload to check supported values.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    //include the keys you would like to modify\n   
                \"database_name\": \"{{DBConnectionName}}\"\n}"
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: DatabaseID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/database/{DatabaseID}/connection:
    get:
      tags:
        - Superset APIs (Open Source) > Databases
      summary: Get a Database Connection Parameters
      description: >-
        ###### _Requires admin permission._


        Get connection parameters from a specific Database Connection from a
        Workspace.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{DatabaseID}}` with the Database Connection `id` retrieved from the
        **Get All Database Connections from a Workspace** endpoint.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: DatabaseID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/database/:
    post:
      tags:
        - Superset APIs (Open Source) > Databases
      summary: Create a Database Connection using SSH
      operationId: createDatabaseUsingSSH
      description: >-
        Creates a new database connection on the Workspace using SSH.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        Replace on the body:


        - `{{DBConnectionName}}` with the desired DB connection display name.

        - `{{SQLAlchemyURI}}` with the [connection
        string](https://docs.preset.io/docs/uri-connection-strings) to the
        database.

        - For the SSH configuration:
            - Use either a `username` and `password`, or `username`, `private_key` and `private_key_password` combination to authenticate to the SSH server, removing the un-used fields.
            - Replace `{{SSHServerAddress}}` with the SSH server host address.
        - `boolean` with either `true` or `false` to enable/disable the
        connection settings.

        - `{{ExtraConfiguration}}` _(optional)_ with any addifional
        configuration (like **Engine Parameters**). For example:
            

        ```

        {\"engine_params\": {\"connect_args\": {\"http_path\":
        \"/sql/1.0/warehouses/********\"}}}


        ```


        **Note:** You need to escape quotes (`"`) and other special characters
        using `\` on all body fields.
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{\n    \"database_name\": \"{{DBConnectionName}}\",\n   
                \"configuration_method\": \"sqlalchemy_form\",\n   
                \"sqlalchemy_uri\": \"{{SQLAlchemyURI}}\",\n    \"ssh_tunnel\":
                {\n        \"username\": \"{{SSHUsername}}\",\n       
                \"password\": \"{{SSHServerPassword}}\",\n       
                \"private_key\": \"{{PrivateKey}}\",\n       
                \"private_key_password\": \"{{PrivateKeyPassword}}\",\n       
                \"server_port\": 22,\n        \"server_address\":
                \"{{SSHServerAddress}}\"\n    },\n    \"allow_csv_upload\":
                \"boolean\",\n    \"allow_ctas\": \"boolean\",\n   
                \"allow_cvas\": \"boolean\",\n    \"allow_dml\":
                \"boolean\",\n    \"allow_multi_schema_metadata_fetch\":
                \"boolean\",\n    \"allow_run_async\": \"boolean\",\n   
                \"cache_timeout\": 0,\n    \"expose_in_sqllab\":
                \"boolean\",\n    \"impersonate_user\": \"boolean\",\n   
                \"extra\": \"{{ExtraConfiguration}}\"\n}"
      parameters:
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app-dev.preset.io/
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/database/export:
    get:
      tags:
        - Superset APIs (Open Source) > Databases
      summary: Export Database Connections
      description: >-
        Exports Database Connections from the Workspace.


        Replace in the URL:


        *   `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        *   `{{WorkspaceRegion}}` corresponding to the `region` retrieved from
        the **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        *   `{{DatabaseIDs}` with comma separated DB `ids` retrieved from the
        **Get all Database Connections from a Workspace** endpoint.
            

        ***Tip:*** If used in Postman, select `Save Response` and `Save to a
        File` to get the zip export.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{JWTToken}}'
        - name: Accept
          in: header
          schema:
            type: string
          example: application/zip
        - name: q
          in: query
          schema:
            type: string
          description: Comma separated list of database connection IDs.
          example: '!({{DatabaseIDs}})'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/database/import/:
    post:
      tags:
        - Superset APIs (Open Source) > Databases
      summary: Import a Database Connection
      description: >-
        Imports a Database Connection.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        In the body:


        - Select your Chart ZIP file as a value for the `formData`.

        - For the `passwords` field:
            - Replace `{{DatabaseYAMLFile}}` by the database YAML file name. You can find it in your export file, under the `databases` folder.
            - Replace `{{DatabasePassword}}` by the DB password.
        - For the `overwrite` field:
            - If the DB Connection already exists on the destination Workspace, set it as `true` to overwrite it.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                formData:
                  type: string
                  format: binary
                passwords:
                  type: string
                  example: '{"databases/{{DatabaseYAMLFile}}": "{{DatabasePassword}}"}'
                overwrite:
                  type: boolean
                  example: 'true'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: multipart/form-data;
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dataset/:
    get:
      tags:
        - Superset APIs (Open Source) > Datasets
      summary: Get all Datasets from a Workspace
      description: >-
        Gets all Datasets available on the Worpkspace.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        Note that this endpoint returns 20 results by default. You can return up
        to 100 results at a time and use pagination by adding the following
        query parameters:


        ```

        ?q=(page_size:{{PageSize}},page:{{Page}})


        ```


        Replace:


        - `{{PageSize}}` with the desired size (min `1` max `100`).

        - `{{Page}}` with the page number (useful when the total count >
        `{{PageSize}}` - min `0`).
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dataset/{DatasetID}:
    get:
      tags:
        - Superset APIs (Open Source) > Datasets
      summary: Get a Dataset
      description: "Get a specific Dataset from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}`\_with the\_`name`\_retrieved through the API (using the\_**Get Workspaces from a Team**\_endpoint).\n- `{{WorkspaceRegion}}`\_corresponding to the\_`region`\_retrieved from the\_**Get Workspaces from a Team**\_endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the\_`{{WorkspaceSlug}}`\_and\_`{{WorkspaceRegion}}`\_from the URL ->\_`https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.\n\n- `{{DatasetID}}`\_with the Dataset\_`id`\_retrieved from the\_**Get All Datasets from a Workspace**\_endpoint."
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: DatasetID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Superset APIs (Open Source) > Datasets
      summary: Update a Virtual Dataset
      description: >-
        Updates a Virtual Dataset.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{DatasetID}}` with the Dataset `id` retrieved from the **Get All
        Datasets from a Workspace** endpoint.
            

        Replace in the body:


        - `{{DBID}}` with the database `id` retrieved using the **Get
        Databases** endoint.

        - `{{SchemaName}}` with the desired schema.

        - `{{TableName}}` with the desired table.

        - `{{DatasetSQL}}` with the SQL query to power your dataset.

        - `{{OwnerID}}` with the `id` for the desired owner account(s) retrieved
        from the **Get all possible Dataset Owners** endpoint. Use a comma to
        separate multiple IDs (for example, `[2,5]`).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "database_id": {{DBID}},
                    "schema": "{{SchemaName}}",
                    "table_name": "{{TableName}}",
                    "sql": "{{DatasetSQL}}",
                    "owners": [
                        {{OwnerID}}
                    ]
                }
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: DatasetID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Superset APIs (Open Source) > Datasets
      summary: Delete a Dataset
      description: "Deletes a Dataset.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}`\_with the\_`name`\_retrieved through the API (using the\_**Get Workspaces from a Team**\_endpoint).\n- `{{WorkspaceRegion}}`\_corresponding to the\_`region`\_retrieved from the\_**Get Workspaces from a Team**\_endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the\_`{{WorkspaceSlug}}`\_and\_`{{WorkspaceRegion}}`\_from the URL ->\_`https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.\n\n- `{{DatasetID}}` with the Dataset\_`id`\_retrieved from the\_**Get All Datasets from a Workspace**\_endpoint."
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: DatasetID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dataset/related/owners:
    get:
      tags:
        - Superset APIs (Open Source) > Datasets
      summary: Get all possible Dataset Owners
      description: >-
        Gets all possible Dataset owners on the Workspace.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        Note that this endpoint returns 20 results by default. You can return up
        to 100 results at a time and use pagination by adding the following
        query parameters:


        ```

        ?q=(page_size:{{PageSize}},page:{{Page}})


        ```


        Replace:


        - `{{PageSize}}` with the desired size (min `1` max `100`).

        - `{{Page}}` with the page number (useful when the total count >
        `{{PageSize}}` - min `0`).
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dataset:
    post:
      tags:
        - Superset APIs (Open Source) > Datasets
      summary: Create a Virtual Dataset
      description: >-
        Creates a new Virtual Dataset.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        Replace in the body:


        - `{{DBID}}` with the database `id` retrieved using the **Get
        Databases** endoint.

        - `{{SchemaName}}` with the desired schema.

        - `{{TableName}}` with the desired table.

        - `{{DatasetSQL}}` with the SQL query to power your dataset.

        - `{{OwnerID}}` with the `id` for the desired owner account(s) retrieved
        from the **Get all possible Dataset Owners** endpoint. Use a comma to
        separate multiple IDs (for example, `[2,5]`).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: "{\r\n    \"database\": {{DBID}},\r\n    \"schema\": \"{{SchemaName}}\",\r\n    \"table_name\": \"{{TableName}}\",\r\n    \"sql\": \"{{DatasetSQL}}\",\r\n    \"owners\": [\r\n        {{OwnerID}}\r\n    ]\r\n}"
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dataset/{DatasetID}/refresh:
    put:
      tags:
        - Superset APIs (Open Source) > Datasets
      summary: Refresh a Dataset
      description: >-
        Refreshes and updates columns of a Dataset.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{DatasetID}}` with the Dataset `id` retrieved from the **Get All
        Datasets from a Workspace** endpoint.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: ''
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: DatasetID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dataset/export:
    get:
      tags:
        - Superset APIs (Open Source) > Datasets
      summary: Export Datasets
      description: >-
        Exports Datasets from the Workspace.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{DatasetIDs}}` with comma separated `ids` retrieved from the **Get
        all Datasets from a Workspace** endpoint.
            

        _**Tip:**_ If used in Postman, select `Save Response` and `Save to a
        File` to get the zip export.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: '{{JWTToken}}'
        - name: Accept
          in: header
          schema:
            type: string
          example: application/zip
        - name: q
          in: query
          schema:
            type: string
          description: Comma separated list of Dataset IDs.
          example: '!({{DatasetIDs}})'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dataset/import/:
    post:
      tags:
        - Superset APIs (Open Source) > Datasets
      summary: Import a Dataset
      description: >-
        Imports a Dataset.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        In the body:


        - Select your Dataset ZIP file as a value for the `formData`.

        - For the `passwords` field:
            - Replace `{{DatabaseYAMLFile}}` by the database YAML file name. You can find it in your export file, under the `databases` folder.
            - Replace `{{DatabasePassword}}` by the DB password.
        - For the `overwrite` field:
            - If the DB Connection already exists on the destination Workspace, set it as `true` to overwrite it.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                formData:
                  type: string
                  format: binary
                passwords:
                  type: string
                  example: '{"databases/{{DatabaseYAMLFile}}": "{{DatabasePassword}}"}'
                overwrite:
                  type: boolean
                  example: 'true'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: multipart/form-data;
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/chart/:
    get:
      tags:
        - Superset APIs (Open Source) > Charts
      summary: Get all Charts from a Workspace
      description: >-
        Gets all Charts from a Workspace.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        Note that this endpoint returns 20 results by default. You can return up
        to 100 results at a time and use pagination by adding the following
        query parameters:


        ```

        ?q=(page_size:{{PageSize}},page:{{Page}})


        ```


        Replace:


        - `{{PageSize}}` with the desired size (min `1` max `100`).

        - `{{Page}}` with the page number (useful when the total count >
        `{{PageSize}}` - min `0`).
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/chart/{ChartID}:
    get:
      tags:
        - Superset APIs (Open Source) > Charts
      summary: Get a Chart
      description: >-
        Gets a specific Chart from a Workspace.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{ChartID}}` with the chart `id` retrieved from the  
            **Get all Charts from a Workspace** endpoint.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: ChartID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Superset APIs (Open Source) > Charts
      summary: Update a Chart
      description: >-
        Updates a Chart via the API.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{ChartID}}` with the chart `id` retrieved from the  
            **Get all Charts from a Workspace** endpoint.
            

        Replace in the body:


        - `cache_timeout` (optional) by the chart timeout in seconds.

        - `certification_details` (optional) by the details of certification.

        - `certified_by` (optional) by the certifier.

        - `dashboards` by a comma separated list (csl) of dashboard ids the
        chart should be added to (can be empty).

        - `description` (optional) by your description.

        - `is_managed_externally` by true or false.

        - `owners` by a csl of owner ids.

        - `params` by a string of all parameters need to define your chart. You
        can get an example of this either by checking the network tab by
        creating a chart in the UI or by calling the **Get a Chart** endpoint.

        - `slice_name` by the name you want to give to your chart.

        - `viz_type` by the visualization type. You can find this with the **Get
        a Chart** endpoint for a similar chart.

        - `datasource_id` by the id of the dataset powering your chart.

        - `datasource_type` by the type of the underlying dataset.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                cache_timeout: null
                certification_details: null
                certified_by: null
                dashboards:
                  - 8
                description: null
                is_managed_externally: false
                owners: []
                params: >-
                  {"adhoc_filters": [], "color_scheme": "supersetColors",
                  "datasource": "21__table", "granularity_sqla": "year",
                  "groupby": ["platform"], "label_colors": {"2600": "#D1C6BC",
                  "3DO": "#A38F79", "3DS": "#B2B2B2", "Action": "#ACE1C4",
                  "Adventure": "#5AC189", "COUNT(*)": "#1FA8C9", "DC":
                  "#666666", "DS": "#E04355", "Fighting": "#D1C6BC", "GB":
                  "#A1A6BD", "GBA": "#A868B7", "GC": "#D3B3DA", "GEN":
                  "#FF7F44", "GG": "#8FD3E4", "Microsoft Game Studios":
                  "#FCC700", "Misc": "#D3B3DA", "N64": "#EFA1AA", "NES":
                  "#FEC0A1", "NG": "#FCC700", "Nintendo": "#666666", "PC":
                  "#8FD3E4", "PCFX": "#A1A6BD", "PS": "#FCC700", "PS2":
                  "#454E7C", "PS3": "#FF7F44", "PS4": "#A38F79", "PSP":
                  "#3CCCCB", "PSV": "#454E7C", "Platform": "#FDE380", "Puzzle":
                  "#454E7C", "Racing": "#9EE5E5", "Role-Playing": "#EFA1AA",
                  "SAT": "#5AC189", "SCD": "#E04355", "SNES": "#FDE380",
                  "Shooter": "#B2B2B2", "Simulation": "#1FA8C9", "Sports":
                  "#FEC0A1", "Strategy": "#FF7F44", "TG16": "#3CCCCB", "Take-Two
                  Interactive": "#E04355", "WS": "#A868B7", "Wii": "#666666",
                  "WiiU": "#1FA8C9", "X360": "#5AC189", "XB": "#ACE1C4", "XOne":
                  "#9EE5E5"}, "metrics": ["count"], "number_format":
                  "SMART_NUMBER", "queryFields": {"groupby": "groupby",
                  "metrics": "metrics"}, "row_limit": 10, "slice_id": 661,
                  "time_range": "No filter", "time_range_endpoints":
                  ["inclusive", "exclusive"], "treemap_ratio":
                  1.618033988749895, "url_params": {}, "viz_type": "treemap"}
                query_context: null
                slice_name: Test API Altered Created Chart
                viz_type: treemap
                datasource_id: 2
                datasource_type: table
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: ChartID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Superset APIs (Open Source) > Charts
      summary: Delete a Chart
      description: >-
        Deletes a Chart.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{ChartID}}` with the chart `id` retrieved from the **Get all Charts
        from a Workspace** endpoint.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: ChartID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/chart/{ChartID}/data:
    get:
      tags:
        - Superset APIs (Open Source) > Charts
      summary: Get Chart's Data
      description: >-
        Gets Chart's data from a Workspace.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{ChartID}}` with the chart `id` retrieved from the **Get all Charts
        from a Workspace** endpoint.
      parameters:
        - name: ChartID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/chart/related/owners:
    get:
      tags:
        - Superset APIs (Open Source) > Charts
      summary: Get all possible Chart Owners
      description: "Gets all possible Chart owners on the Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.\n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n```\n\nReplace:\n\n- `{{PageSize}}`\_with the desired size (min\_`1`\_max\_`100`).\n- `{{Page}}`\_with the page number (useful when the total count\_>\_`{{PageSize}}`\_- min\_`0`)."
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/chart:
    post:
      tags:
        - Superset APIs (Open Source) > Charts
      summary: Create a Chart
      description: >-
        Creates a Chart through the API.


        Replace in the URL:


        *   `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        *   `{{WorkspaceRegion}}` corresponding to the `region` retrieved from
        the **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        Replace in the body:


        *   `cache_timeout` (optional) by the chart timeout in seconds.

        *   `certification_details` (optional) by the details of certification.

        *   `certified_by` (optional) by the certifier.

        *   `dashboards` by a comma separated list (csl) of dashboard ids the
        chart should be added to (can be empty).

        *   `description` (optional) by your description.

        *   `is_managed_externally` by true or false.

        *   `owners` by a csl of owner ids.

        *   `params` by a string of all parameters need to define your chart.
        You can get an example of this either by checking the network tab by
        creating a chart in the UI or by calling the **Get a Chart** endpoint.

        *   `slice_name` by the name you want to give to your chart.

        *   `viz_type` by the visualization type. You can find this with the
        **Get a Chart** endpoint for a similar chart.

        *   `datasource_id` by the id of the dataset powering your chart.

        *   `datasource_type` by the type of the underlying dataset.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                cache_timeout: null
                certification_details: null
                certified_by: null
                dashboards:
                  - 8
                description: null
                is_managed_externally: false
                owners: []
                params: >-
                  {"adhoc_filters": [], "color_scheme": "supersetColors",
                  "datasource": "21__table", "granularity_sqla": "year",
                  "groupby": ["platform"], "label_colors": {"2600": "#D1C6BC",
                  "3DO": "#A38F79", "3DS": "#B2B2B2", "Action": "#ACE1C4",
                  "Adventure": "#5AC189", "COUNT(*)": "#1FA8C9", "DC":
                  "#666666", "DS": "#E04355", "Fighting": "#D1C6BC", "GB":
                  "#A1A6BD", "GBA": "#A868B7", "GC": "#D3B3DA", "GEN":
                  "#FF7F44", "GG": "#8FD3E4", "Microsoft Game Studios":
                  "#FCC700", "Misc": "#D3B3DA", "N64": "#EFA1AA", "NES":
                  "#FEC0A1", "NG": "#FCC700", "Nintendo": "#666666", "PC":
                  "#8FD3E4", "PCFX": "#A1A6BD", "PS": "#FCC700", "PS2":
                  "#454E7C", "PS3": "#FF7F44", "PS4": "#A38F79", "PSP":
                  "#3CCCCB", "PSV": "#454E7C", "Platform": "#FDE380", "Puzzle":
                  "#454E7C", "Racing": "#9EE5E5", "Role-Playing": "#EFA1AA",
                  "SAT": "#5AC189", "SCD": "#E04355", "SNES": "#FDE380",
                  "Shooter": "#B2B2B2", "Simulation": "#1FA8C9", "Sports":
                  "#FEC0A1", "Strategy": "#FF7F44", "TG16": "#3CCCCB", "Take-Two
                  Interactive": "#E04355", "WS": "#A868B7", "Wii": "#666666",
                  "WiiU": "#1FA8C9", "X360": "#5AC189", "XB": "#ACE1C4", "XOne":
                  "#9EE5E5"}, "metrics": ["count"], "number_format":
                  "SMART_NUMBER", "queryFields": {"groupby": "groupby",
                  "metrics": "metrics"}, "row_limit": 10, "slice_id": 661,
                  "time_range": "No filter", "time_range_endpoints":
                  ["inclusive", "exclusive"], "treemap_ratio":
                  1.618033988749895, "url_params": {}, "viz_type": "treemap"}
                query_context: null
                slice_name: Test API Created Chart 2
                viz_type: treemap
                datasource_id: 2
                datasource_type: table
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/chart/data:
    post:
      tags:
        - Superset APIs (Open Source) > Charts
      summary: Refresh a Chart
      description: >-
        Refreshes the Chart data.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{ChartID}}` with the `id` retrieved from the **Get all Charts from a
        Workspace** endpoint.
            

        The body payload can vary depending on the **visualization type** used
        and also the **chart configuration**, The easiest way to get the
        accurate payload is retrieving the `query_context` data from the **Get a
        Chart** endpoint, and then set `force` to `true` both in the top level
        and also inside `form_data`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "datasource": {
                        "id": "{{DatasetID}}",
                        "type": "{{DatasetType}}"
                    },
                    "force": true,
                    "queries": [],
                    "form_data": {
                        "datasource": "{{DatasetID}}__{{DatasetType}}",
                        "viz_type": "{{VisualizationType}}",
                        "groupby": [],
                        "temporal_columns_lookup": {},
                        "metrics": [],
                        "all_columns": [],
                        "percent_metrics": [],
                        "adhoc_filters": [
                            {}
                        ],
                        "order_by_cols": [],
                        "row_limit": {{RowLimit}},
                        "order_desc": true,
                        "extra_form_data": {},
                        "dashboards": [],
                        "force": true,
                        "result_format": "json",
                        "result_type": "full"
                    },
                    "result_format": "json",
                    "result_type": "full"
                }
      parameters:
        - name: slice_id
          in: query
          schema:
            type: string
          description: ID of the Chart to be refreshed.
          example: '{{ChartID}}'
        - name: force
          in: query
          schema:
            type: string
          description: 'Flag to force refresh data. '
          example: 'true '
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/chart/export/:
    get:
      tags:
        - Superset APIs (Open Source) > Charts
      summary: Export Charts
      description: >-
        Exports Charts.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{ChartIDs}` with comma separated chart `ids` retrieved from the
        **Get all Charts from a Workspace** endpoint.
            

        _**Tip:**_ If used in Postman, select `Save Response` and `Save to a
        File` to get the zip export.
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/zip
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: q
          in: query
          schema:
            type: string
          description: Comma separated list of Chart IDs.
          example: '!({{ChartIDs}})'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/chart/import/:
    post:
      tags:
        - Superset APIs (Open Source) > Charts
      summary: Import a Chart
      description: >-
        Imports a Chart via the API.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        In the body:


        - Select your Chart ZIP file as a value for the `formData`.

        - For the `passwords` field:
            - If the Database used by the Chart doesn't exist on the destination Workspace yet:
                - Replace `{{DatabaseYAMLFile}}` by the database YAML file name. You can find it in your Chart export file, under the `databases` folder.
                - Replace `{{DatabasePassword}}` by your DB password.
            - If the Database already exists on the destination Workspace, you can remove this field from the body.
        - For the `overwrite` field:
            - If the Chart already exists on the destination Workspace, set it as `true` to overwrite it.
            - If the Chart doesn't exist in there yet, you can remove this field from the body.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                formData:
                  type: string
                  format: binary
                passwords:
                  type: string
                  example: '{"databases/{{DatabaseYAMLFile}}": "{{DatabasePassword}}"}'
                overwrite:
                  type: boolean
                  example: 'true'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: multipart/form-data;
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/chart/{ChartID}/cache_screenshot/:
    get:
      tags:
        - Superset APIs (Open Source) > Charts
      summary: Get Chart Screenshot
      description: "Retrieves a URL that can be used to download a Chart as an image.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}`\_with the\_`name`\_retrieved through the API (using the\_**Get Workspaces from a Team**\_endpoint).\n- `{{WorkspaceRegion}}`\_corresponding to the\_`region`\_retrieved from the\_**Get Workspaces from a Team**\_endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the\_`{{WorkspaceSlug}}`\_and\_`{{WorkspaceRegion}}`\_from the URL ->\_`https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.\n\n- `{{ChartID}}` with the `id` retrieved from the **Get all Charts from a Workspace** endpoint."
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: ChartID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dashboard/:
    get:
      tags:
        - Superset APIs (Open Source) > Dashboards
      summary: Get all Dashboards From a Workspace
      description: "Gets all Dashboards from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.\n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n```\n\nReplace:\n\n- `{{PageSize}}`\_with the desired size (min\_`1`\_max\_`100`).\n- `{{Page}}`\_with the page number (useful when the total count\_>\_`{{PageSize}}`\_- min\_`0`)."
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Superset APIs (Open Source) > Dashboards
      summary: Create a Dashboard
      description: >-
        Creates a Dashboard using the API.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        Replace in the body:


        - `certification_details` (optional) by the details of certification

        - `certified_by` (optional) by the certifier

        - `css` (optional) add any css to the dashboard in a string here
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                dashboard_title: cool new dashboard
                owners:
                  - 0
                roles:
                  - 0
                json_metadata: {}
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dashboard/{DashboardID}:
    get:
      tags:
        - Superset APIs (Open Source) > Dashboards
      summary: Get a Dashboard
      description: >-
        Get a specific Dashboard from a Workspace.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{DashboardID}}` with the `id` of the desired Dashboard. You can get
        the `id` using the **Get all Dashboards From a Workspace** endpoint.
        Alternatively, you can get from the Dashboard URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/dashboard/{{DashboardID}}`.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: DashboardID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Superset APIs (Open Source) > Dashboards
      summary: Update a Dashboard
      requestBody:
        content:
          '*/*':
            schema:
              type: string
              example: >-
                "{ \"position_json\":\"{\\\"CHART-1NOOLm5YPs\\\":
                {\\\"children\\\": [], \\\"id\\\": \\\"CHART-1NOOLm5YPs\\\",
                \\\"meta\\\": {\\\"chartId\\\": 20, \\\"height\\\": 25,
                \\\"sliceName\\\": \\\"Total Items Sold\\\",
                \\\"sliceNameOverride\\\": \\\"Total Products Sold\\\",
                \\\"uuid\\\": \\\"c3d643cd-fd6f-4659-a5b7-59402487a8d0\\\",
                \\\"width\\\": 2}, \\\"parents\\\": [\\\"ROOT_ID\\\",
                \\\"TABS-e5Ruro0cjP\\\", \\\"TAB-d-E0Zc1cTH\\\",
                \\\"ROW-Tyv02UA_6W\\\", \\\"COLUMN-8Rp54B6ikC\\\"],
                \\\"type\\\": \\\"CHART\\\"}, \\\"CHART-AYpv8gFi_q\\\":
                {\\\"children\\\": [], \\\"id\\\": \\\"CHART-AYpv8gFi_q\\\",
                \\\"meta\\\": {\\\"chartId\\\": 43, \\\"height\\\": 91,
                \\\"sliceName\\\": \\\"Number of Deals (for each
                Combination)\\\", \\\"uuid\\\":
                \\\"bd20fc69-dd51-46c1-99b5-09e37a434bf1\\\", \\\"width\\\": 3},
                \\\"parents\\\": [\\\"ROOT_ID\\\", \\\"TABS-e5Ruro0cjP\\\",
                \\\"TAB-4fthLQmdX\\\", \\\"ROW-0l1WcDzW3\\\"], \\\"type\\\":
                \\\"CHART\\\"}, \\\"CHART-KKT9BsnUst\\\": {\\\"children\\\": [],
                \\\"id\\\": \\\"CHART-KKT9BsnUst\\\", \\\"meta\\\":
                {\\\"chartId\\\": 33, \\\"height\\\": 59, \\\"sliceName\\\":
                \\\"Quarterly Sales (By Product Line)\\\",
                \\\"sliceNameOverride\\\": \\\"Quarterly Revenue (By Product
                Line)\\\", \\\"uuid\\\":
                \\\"db9609e4-9b78-4a32-87a7-4d9e19d51cd8\\\", \\\"width\\\": 7},
                \\\"parents\\\": [\\\"ROOT_ID\\\", \\\"TABS-e5Ruro0cjP\\\",
                \\\"TAB-d-E0Zc1cTH\\\", \\\"ROW-oAtmu5grZ\\\"], \\\"type\\\":
                \\\"CHART\\\"}, \\\"CHART-OJ9aWDmn1q\\\": {\\\"children\\\": [],
                \\\"id\\\": \\\"CHART-OJ9aWDmn1q\\\", \\\"meta\\\":
                {\\\"chartId\\\": 36, \\\"height\\\": 91, \\\"sliceName\\\":
                \\\"Proportion of Revenue by Product Line\\\",
                \\\"sliceNameOverride\\\": \\\"Proportion of Monthly Revenue by
                Product Line\\\", \\\"uuid\\\":
                \\\"08aff161-f60c-4cb3-a225-dc9b1140d2e3\\\", \\\"width\\\": 6},
                \\\"parents\\\": [\\\"ROOT_ID\\\", \\\"TABS-e5Ruro0cjP\\\",
                \\\"TAB-4fthLQmdX\\\", \\\"ROW-0l1WcDzW3\\\"], \\\"type\\\":
                \\\"CHART\\\"}, \\\"CHART-YFg-9wHE7s\\\": {\\\"children\\\": [],
                \\\"id\\\": \\\"CHART-YFg-9wHE7s\\\", \\\"meta\\\":
                {\\\"chartId\\\": 24, \\\"height\\\": 63, \\\"sliceName\\\":
                \\\"Seasonality of Revenue (per Product Line)\\\", \\\"uuid\\\":
                \\\"cf0da099-b3ab-4d94-ab62-cf353ac3c611\\\", \\\"width\\\": 6},
                \\\"parents\\\": [\\\"ROOT_ID\\\", \\\"TABS-e5Ruro0cjP\\\",
                \\\"TAB-4fthLQmdX\\\", \\\"ROW-E7MDSGfnm\\\"], \\\"type\\\":
                \\\"CHART\\\"}, \\\"CHART-_LMKI0D3tj\\\": {\\\"children\\\": [],
                \\\"id\\\": \\\"CHART-_LMKI0D3tj\\\", \\\"meta\\\":
                {\\\"chartId\\\": 30, \\\"height\\\": 62, \\\"sliceName\\\":
                \\\"Revenue by Deal SIze\\\", \\\"sliceNameOverride\\\":
                \\\"Monthly Revenue by Deal SIze\\\", \\\"uuid\\\":
                \\\"f065a533-2e13-42b9-bd19-801a21700dff\\\", \\\"width\\\": 6},
                \\\"parents\\\": [\\\"ROOT_ID\\\", \\\"TABS-e5Ruro0cjP\\\",
                \\\"TAB-4fthLQmdX\\\", \\\"ROW-E7MDSGfnm\\\"], \\\"type\\\":
                \\\"CHART\\\"}, \\\"CHART-id4RGv80N-\\\": {\\\"children\\\": [],
                \\\"id\\\": \\\"CHART-id4RGv80N-\\\", \\\"meta\\\":
                {\\\"chartId\\\": 19, \\\"height\\\": 40, \\\"sliceName\\\":
                \\\"Total Items Sold (By Product Line)\\\",
                \\\"sliceNameOverride\\\": \\\"Total Products Sold (By Product
                Line)\\\", \\\"uuid\\\":
                \\\"b8b7ca30-6291-44b0-bc64-ba42e2892b86\\\", \\\"width\\\": 2},
                \\\"parents\\\": [\\\"ROOT_ID\\\", \\\"TABS-e5Ruro0cjP\\\",
                \\\"TAB-d-E0Zc1cTH\\\", \\\"ROW-oAtmu5grZ\\\",
                \\\"COLUMN-G6_2DvG8aK\\\"], \\\"type\\\": \\\"CHART\\\"},
                \\\"CHART-iyvXMcqHt9\\\": {\\\"children\\\": [], \\\"id\\\":
                \\\"CHART-iyvXMcqHt9\\\", \\\"meta\\\": {\\\"chartId\\\": 8,
                \\\"height\\\": 39, \\\"sliceName\\\": \\\"Filter\\\",
                \\\"uuid\\\": \\\"a5689df7-98fc-7c51-602c-ebd92dc3ec70\\\",
                \\\"width\\\": 2}, \\\"parents\\\": [\\\"ROOT_ID\\\",
                \\\"TABS-e5Ruro0cjP\\\", \\\"TAB-4fthLQmdX\\\",
                \\\"ROW-0l1WcDzW3\\\", \\\"COLUMN-jlNWyWCfTC\\\"], \\\"type\\\":
                \\\"CHART\\\"}, \\\"CHART-j24u8ve41b\\\": {\\\"children\\\": [],
                \\\"id\\\": \\\"CHART-j24u8ve41b\\\", \\\"meta\\\":
                {\\\"chartId\\\": 41, \\\"height\\\": 59, \\\"sliceName\\\":
                \\\"Overall Sales (By Product Line)\\\",
                \\\"sliceNameOverride\\\": \\\"Total Revenue (By Product
                Line)\\\", \\\"uuid\\\":
                \\\"09c497e0-f442-1121-c9e7-671e37750424\\\", \\\"width\\\": 3},
                \\\"parents\\\": [\\\"ROOT_ID\\\", \\\"TABS-e5Ruro0cjP\\\",
                \\\"TAB-d-E0Zc1cTH\\\", \\\"ROW-oAtmu5grZ\\\"], \\\"type\\\":
                \\\"CHART\\\"}, \\\"CHART-lFanAaYKBK\\\": {\\\"children\\\": [],
                \\\"id\\\": \\\"CHART-lFanAaYKBK\\\", \\\"meta\\\":
                {\\\"chartId\\\": 18, \\\"height\\\": 26, \\\"sliceName\\\":
                \\\"Total Revenue\\\", \\\"uuid\\\":
                \\\"7b12a243-88e0-4dc5-ac33-9a840bb0ac5a\\\", \\\"width\\\": 3},
                \\\"parents\\\": [\\\"ROOT_ID\\\", \\\"TABS-e5Ruro0cjP\\\",
                \\\"TAB-d-E0Zc1cTH\\\", \\\"ROW-Tyv02UA_6W\\\",
                \\\"COLUMN-8Rp54B6ikC\\\"], \\\"type\\\": \\\"CHART\\\"},
                \\\"CHART-vomBOiI7U9\\\": {\\\"children\\\": [], \\\"id\\\":
                \\\"CHART-vomBOiI7U9\\\", \\\"meta\\\": {\\\"chartId\\\": 34,
                \\\"height\\\": 53, \\\"sliceName\\\": \\\"Quarterly Sales\\\",
                \\\"sliceNameOverride\\\": \\\"Quarterly Revenue\\\",
                \\\"uuid\\\": \\\"692aca26-a526-85db-c94c-411c91cc1077\\\",
                \\\"width\\\": 7}, \\\"parents\\\": [\\\"ROOT_ID\\\",
                \\\"TABS-e5Ruro0cjP\\\", \\\"TAB-d-E0Zc1cTH\\\",
                \\\"ROW-Tyv02UA_6W\\\"], \\\"type\\\": \\\"CHART\\\"},
                \\\"COLUMN-8Rp54B6ikC\\\": {\\\"children\\\":
                [\\\"CHART-lFanAaYKBK\\\", \\\"CHART-1NOOLm5YPs\\\"],
                \\\"id\\\": \\\"COLUMN-8Rp54B6ikC\\\", \\\"meta\\\":
                {\\\"background\\\": \\\"BACKGROUND_TRANSPARENT\\\",
                \\\"width\\\": 2}, \\\"parents\\\": [\\\"ROOT_ID\\\",
                \\\"TABS-e5Ruro0cjP\\\", \\\"TAB-d-E0Zc1cTH\\\",
                \\\"ROW-Tyv02UA_6W\\\"], \\\"type\\\": \\\"COLUMN\\\"},
                \\\"COLUMN-G6_2DvG8aK\\\": {\\\"children\\\":
                [\\\"CHART-id4RGv80N-\\\"], \\\"id\\\":
                \\\"COLUMN-G6_2DvG8aK\\\", \\\"meta\\\": {\\\"background\\\":
                \\\"BACKGROUND_TRANSPARENT\\\", \\\"width\\\": 2},
                \\\"parents\\\": [\\\"ROOT_ID\\\", \\\"TABS-e5Ruro0cjP\\\",
                \\\"TAB-d-E0Zc1cTH\\\", \\\"ROW-oAtmu5grZ\\\"], \\\"type\\\":
                \\\"COLUMN\\\"}, \\\"COLUMN-jlNWyWCfTC\\\": {\\\"children\\\":
                [\\\"MARKDOWN-HrzsMmvGQo\\\", \\\"CHART-iyvXMcqHt9\\\"],
                \\\"id\\\": \\\"COLUMN-jlNWyWCfTC\\\", \\\"meta\\\":
                {\\\"background\\\": \\\"BACKGROUND_TRANSPARENT\\\",
                \\\"width\\\": 3}, \\\"parents\\\": [\\\"ROOT_ID\\\",
                \\\"TABS-e5Ruro0cjP\\\", \\\"TAB-4fthLQmdX\\\",
                \\\"ROW-0l1WcDzW3\\\"], \\\"type\\\": \\\"COLUMN\\\"},
                \\\"DASHBOARD_VERSION_KEY\\\": \\\"v2\\\", \\\"GRID_ID\\\":
                {\\\"children\\\": [], \\\"id\\\": \\\"GRID_ID\\\",
                \\\"parents\\\": [\\\"ROOT_ID\\\"], \\\"type\\\": \\\"GRID\\\"},
                \\\"HEADER_ID\\\": {\\\"id\\\": \\\"HEADER_ID\\\", \\\"meta\\\":
                {\\\"text\\\": \\\"Sales Dashboard\\\"}, \\\"type\\\":
                \\\"HEADER\\\"}, \\\"MARKDOWN--AtDSWnapE\\\": {\\\"children\\\":
                [], \\\"id\\\": \\\"MARKDOWN--AtDSWnapE\\\", \\\"meta\\\":
                {\\\"code\\\": \\\"# \\�\\� Vehicle Sales Dashboard
                \\�\\�\\\\n\\\\nThis example dashboard provides insight into the
                business operations of vehicle seller. The dataset powering this
                dashboard can be found [here on
                Kaggle](https://www.kaggle.com/kyanyoga/sample-sales-data).\\\\n\\\\n###
                Timeline\\\\n\\\\nThe dataset contains data on all orders from
                the 2003 and 2004 fiscal years, and some orders from
                2005.\\\\n\\\\n### Products Sold\\\\n\\\\nThis shop mainly sells
                the following products:\\\\n\\\\n- \\�\\� Classic Cars\\\\n-
                \\�\\�\\️ Vintage Cars\\\\n- \\�\\�\\️ Motorcycles\\\\n- \\�\\�
                Trucks & Buses \\�\\�\\\\n- \\�\\�\\️ Planes\\\\n- \\�\\�
                Ships\\\\n- \\�\\� Trains\\\", \\\"height\\\": 53,
                \\\"width\\\": 3}, \\\"parents\\\": [\\\"ROOT_ID\\\",
                \\\"TABS-e5Ruro0cjP\\\", \\\"TAB-d-E0Zc1cTH\\\",
                \\\"ROW-Tyv02UA_6W\\\"], \\\"type\\\": \\\"MARKDOWN\\\"},
                \\\"MARKDOWN-HrzsMmvGQo\\\": {\\\"children\\\": [], \\\"id\\\":
                \\\"MARKDOWN-HrzsMmvGQo\\\", \\\"meta\\\": {\\\"code\\\": \\\"#
                \\�\\� Filter Box\\\\n\\\\nDashboard filters are a powerful way
                to enable teams to dive deeper into their business operations
                data. This filter box helps focus the charts along the following
                variables:\\\\n\\\\n- Time Range: Focus in on a specific time
                period (e.g. a holiday or quarter)\\\\n- Product Line: Choose 1
                or more product lines to see relevant sales data\\\\n- Deal
                Size: Zoom in on small, medium, and / or large sales
                deals\\\\n\\\\nThe filter box below \\�\\� is configured to only
                apply to the charts in this tab (**Exploratory**). You can
                customize the charts that this filter box applies to
                by:\\\\n\\\\n- entering Edit mode in this dashboard\\\\n-
                selecting the `...` in the top right corner\\\\n- selecting the
                **Set filter mapping** button\\\", \\\"height\\\": 50,
                \\\"width\\\": 3}, \\\"parents\\\": [\\\"ROOT_ID\\\",
                \\\"TABS-e5Ruro0cjP\\\", \\\"TAB-4fthLQmdX\\\",
                \\\"ROW-0l1WcDzW3\\\", \\\"COLUMN-jlNWyWCfTC\\\"], \\\"type\\\":
                \\\"MARKDOWN\\\"}, \\\"ROOT_ID\\\": {\\\"children\\\":
                [\\\"TABS-e5Ruro0cjP\\\"], \\\"id\\\": \\\"ROOT_ID\\\",
                \\\"type\\\": \\\"ROOT\\\"}, \\\"ROW-0l1WcDzW3\\\":
                {\\\"children\\\": [\\\"COLUMN-jlNWyWCfTC\\\",
                \\\"CHART-OJ9aWDmn1q\\\", \\\"CHART-AYpv8gFi_q\\\"], \\\"id\\\":
                \\\"ROW-0l1WcDzW3\\\", \\\"meta\\\": {\\\"background\\\":
                \\\"BACKGROUND_TRANSPARENT\\\"}, \\\"parents\\\":
                [\\\"ROOT_ID\\\", \\\"TABS-e5Ruro0cjP\\\",
                \\\"TAB-4fthLQmdX\\\"], \\\"type\\\": \\\"ROW\\\"},
                \\\"ROW-E7MDSGfnm\\\": {\\\"children\\\":
                [\\\"CHART-YFg-9wHE7s\\\", \\\"CHART-_LMKI0D3tj\\\"],
                \\\"id\\\": \\\"ROW-E7MDSGfnm\\\", \\\"meta\\\":
                {\\\"background\\\": \\\"BACKGROUND_TRANSPARENT\\\"},
                \\\"parents\\\": [\\\"ROOT_ID\\\", \\\"TABS-e5Ruro0cjP\\\",
                \\\"TAB-4fthLQmdX\\\"], \\\"type\\\": \\\"ROW\\\"},
                \\\"ROW-Tyv02UA_6W\\\": {\\\"children\\\":
                [\\\"COLUMN-8Rp54B6ikC\\\", \\\"CHART-vomBOiI7U9\\\",
                \\\"MARKDOWN--AtDSWnapE\\\"], \\\"id\\\":
                \\\"ROW-Tyv02UA_6W\\\", \\\"meta\\\": {\\\"background\\\":
                \\\"BACKGROUND_TRANSPARENT\\\"}, \\\"parents\\\":
                [\\\"ROOT_ID\\\", \\\"TABS-e5Ruro0cjP\\\",
                \\\"TAB-d-E0Zc1cTH\\\"], \\\"type\\\": \\\"ROW\\\"},
                \\\"ROW-oAtmu5grZ\\\": {\\\"children\\\":
                [\\\"COLUMN-G6_2DvG8aK\\\", \\\"CHART-KKT9BsnUst\\\",
                \\\"CHART-j24u8ve41b\\\"], \\\"id\\\": \\\"ROW-oAtmu5grZ\\\",
                \\\"meta\\\": {\\\"background\\\":
                \\\"BACKGROUND_TRANSPARENT\\\"}, \\\"parents\\\":
                [\\\"ROOT_ID\\\", \\\"TABS-e5Ruro0cjP\\\",
                \\\"TAB-d-E0Zc1cTH\\\"], \\\"type\\\": \\\"ROW\\\"},
                \\\"TAB-4fthLQmdX\\\": {\\\"children\\\":
                [\\\"ROW-0l1WcDzW3\\\", \\\"ROW-E7MDSGfnm\\\"], \\\"id\\\":
                \\\"TAB-4fthLQmdX\\\", \\\"meta\\\": {\\\"text\\\": \\\"\\�\\�
                Exploratory\\\"}, \\\"parents\\\": [\\\"ROOT_ID\\\",
                \\\"TABS-e5Ruro0cjP\\\"], \\\"type\\\": \\\"TAB\\\"},
                \\\"TAB-d-E0Zc1cTH\\\": {\\\"children\\\":
                [\\\"ROW-Tyv02UA_6W\\\", \\\"ROW-oAtmu5grZ\\\"], \\\"id\\\":
                \\\"TAB-d-E0Zc1cTH\\\", \\\"meta\\\": {\\\"text\\\": \\\"\\�\\�
                Sales Overview\\\"}, \\\"parents\\\": [\\\"ROOT_ID\\\",
                \\\"TABS-e5Ruro0cjP\\\"], \\\"type\\\": \\\"TAB\\\"},
                \\\"TABS-e5Ruro0cjP\\\": {\\\"children\\\":
                [\\\"TAB-d-E0Zc1cTH\\\", \\\"TAB-4fthLQmdX\\\"], \\\"id\\\":
                \\\"TABS-e5Ruro0cjP\\\", \\\"meta\\\": {}, \\\"parents\\\":
                [\\\"ROOT_ID\\\"], \\\"type\\\": \\\"TABS\\\"}}\"\n\n    }"
      parameters:
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: DashboardID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Superset APIs (Open Source) > Dashboards
      summary: Delete Dashboard
      description: >-
        Deletes a Dashboard.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{DashboardID}}` with the `id` of the desired Dashboard. You can get
        the `id` using the **Get all Dashboards From a Workspace** endpoint.
        Alternatively, you can get from the Dashboard URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/dashboard/{{DashboardID}}`.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: DashboardID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dashboard/export/:
    get:
      tags:
        - Superset APIs (Open Source) > Dashboards
      summary: Export Dashboards
      description: >-
        Exports a ZIP file from a Dashboard.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{DashboardIDs}}` with the `id`s of the Dashboard(s) you want to
        export (separated by comma). You can get the `id`s using the **Get all
        Dashboards From a Workspace** endpoint. Alternatively, you can get from
        the Dashboard URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/dashboard/{{DashboardID}}`.
            

        _**Tip:**_ If used in Postman, select `Save Response` and `Save to a
        File` to get the zip export.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/zip
        - name: q
          in: query
          schema:
            type: string
          description: Comma separated list of Dashboard IDs.
          example: '!({{DashboardIDs}})'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dashboard/import/:
    post:
      tags:
        - Superset APIs (Open Source) > Dashboards
      summary: Import a Dashboard
      description: >-
        Imports a Dashboard via the API.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        In the body:


        - Select your Dashboard ZIP file as a value for the `formData`.

        - For the `passwords` field:
            - If the Database used by the Dashboard doesn't exist on the destination Workspace yet:
                - Replace `{{DatabaseYAMLFile}}` by the Database YAML file name. You can find it in your Dashboard export file, under the `databases` folder.
                - Replace `{{DatabasePassword}}` by your DB password.
            - If the Database already exists on the destination Workspace, you can remove this field from the body.
        - For the `overwrite` field:
            - If the Dashboard already exists on the destination Workspace, set it as `true` to overwrite it.
            - If the Dashboard doesn't exist in there yet, you can remove this field from the body.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                formData:
                  type: string
                  format: binary
                passwords:
                  type: string
                  example: '{"databases/{{DatabaseYAMLFile}}": "{{DatabasePassword}}"}'
                overwrite:
                  type: boolean
                  example: 'true'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: multipart/form-data;
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dashboard/{DashboardID}/charts:
    get:
      tags:
        - Superset APIs (Open Source) > Dashboards
      summary: Get Charts from a Dashboard
      description: >-
        Gets all Charts associated with a Dashboard.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{DashboardID}}` with the `id`s of the desired Dashboard. You can get
        the `id`s using the **Get all Dashboards From a Workspace** endpoint.
        Alternatively, you can get from the Dashboard URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/dashboard/{{DashboardID}}`.
            

        Note that this endpoint returns 20 results by default. You can return up
        to 100 results at a time and use pagination by adding the following
        query parameters:


        ```

        ?q=(page_size:{{PageSize}},page:{{Page}})


        ```


        Replace:


        - `{{PageSize}}` with the desired size (min `1` max `100`).

        - `{{Page}}` with the page number (useful when the total count >
        `{{PageSize}}` - min `0`).
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: DashboardID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dashboard/{DashboardID}/datasets:
    get:
      tags:
        - Superset APIs (Open Source) > Dashboards
      summary: Get Datasets from a Dashboard
      description: >-
        Gets all Datasets associated with a Dashboard.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{DashboardID}}` with the `id`s of the desired Dashboard. You can get
        the `id`s using the **Get all Dashboards From a Workspace** endpoint.
        Alternatively, you can get from the Dashboard URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/dashboard/{{DashboardID}}`.
            

        Note that this endpoint returns 20 results by default. You can return up
        to 100 results at a time and use pagination by adding the following
        query parameters:


        ```

        ?q=(page_size:{{PageSize}},page:{{Page}})


        ```


        Replace:


        - `{{PageSize}}` with the desired size (min `1` max `100`).

        - `{{Page}}` with the page number (useful when the total count >
        `{{PageSize}}` - min `0`).
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: DashboardID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dashboard/_info:
    get:
      tags:
        - Superset APIs (Open Source) > Dashboards
      summary: Get Dashboard Info
      description: >-
        Gets Dashboard info.


        Replace in the URL:


        *   `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        *   `{{WorkspaceRegion}}` corresponding to the `region` retrieved from
        the **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/dashboard/{DashboardID}/permalink:
    post:
      tags:
        - Superset APIs (Open Source) > Dashboards
      summary: Create a Permalink to a Dashboard
      description: "Creates a permalink to a Dashboard (with applied filters) using the API.\n\nReplace in the URL and on the\_`Referer`\_header:\n\n- `{{WorkspaceSlug}}`\_with the\_`name`\_retrieved through the API (using the\_**Get Workspaces from a Team**\_endpoint).\n- `{{WorkspaceRegion}}`\_corresponding to the\_`region`\_retrieved from the\_**Get Workspaces from a Team**\_endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the\_`{{WorkspaceSlug}}`\_and\_`{{WorkspaceRegion}}`\_from the URL ->\_`https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.\n\nReplace in the body:\n\n- `{{FilterID}}` with the ID of the filter you want to modify. You can retrieve it either via the **Dashboard JSON Metadata**, or via the **Get a Dashboard** endpoint.\n- `{{Column}}` with the column that is used on the filter.\n- `{{Operator}}` with the filtering operation to be applied. Available options:\n    - `IN`\n    - `NOT IN`\n- `{{Value}}` with the value to be applied on the filter."
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                dataMask:
                  '{{FilterID}}':
                    id: '{{FilterID}}'
                    extraFormData:
                      filters:
                        - col: '{{Column}}'
                          op: '{{Operator}}'
                          val:
                            - '{{Value}}'
                    filterState:
                      validateStatus: false
                      label: '{{Value}}'
                      value:
                        - '{{Value}}'
                    ownState: {}
                    __cache:
                      validateStatus: false
                      label: '{{Value}}'
                      value:
                        - '{{Value}}'
                urlParams: []
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/ecmascript
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: DashboardID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/sqllab/execute/:
    post:
      tags:
        - Superset APIs (Open Source) > SQL Lab
      summary: Execute a SQL Query
      description: >-
        Executes a SQL query through the API.


        Replace in the URL and in the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        Replace in the body:


        - `{{DBID}}` with the `id` retrieved from the **Get all Database
        Connections from a Workspace** endpoint.

        - `{{SQLQuery}}` with the desired SQL query to be executed. Don't forget
        to escape quotes with `\`. For example:
            

        ``` json

        {
            "database_id": 1,
            "sql": "SELECT * FROM \"Vehicle Sales\" limit 7" 
          }

        ```
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "database_id": {{DatabaseID}},
                    "sql": "{{SQLQuery}}"
                }
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/annotation_layer/:
    get:
      tags:
        - Superset APIs (Open Source) > Annotation Layers
      summary: Get all Annotation Layers from a Workspace
      description: "Gets all Annotation Layers from a Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).\n- `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the **Get Workspaces from a Team** endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL -> `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.\n\nNote that this endpoint returns 20 results by default. You can return up to 100 results at a time and use pagination by adding the following query parameters:\n\n```\n?q=(page_size:{{PageSize}},page:{{Page}})\n\n```\n\nReplace:\n\n- `{{PageSize}}`\_with the desired size (min\_`1`\_max\_`100`).\n- `{{Page}}`\_with the page number (useful when the total count\_>\_`{{PageSize}}`\_- min\_`0`)."
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Superset APIs (Open Source) > Annotation Layers
      summary: Create an Annotation Layer
      description: >-
        Creates an Annotation Layer through the API.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        Replace in the body:


        - `{{AnnotationLayerDescription}}` with a description for the Annotation
        Layer.

        - `{{AnnotationLayerName}}` with the desired new name.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                descr: '{{AnnotationLayerDescription}}'
                name: '{{AnnotationLayerName}}'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Superset APIs (Open Source) > Annotation Layers
      summary: Delete multiple Annotations Layers
      description: >-
        Deletes multiple Annotations from an Annotation Layer through the API.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from
        the **Get all Annotation Layers from a Workspace** endpoint.

        - `{{AnnotationLayerIDs}` with comma separated Annotation Layer `ids`
        retrieved from the **Get all Annotation Layers from a Workspace**
        endpoint.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: q
          in: query
          schema:
            type: string
          description: Comma separated list of Annotation Layer IDs.
          example: '!({{AnnotationLayerIDs}})'
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/annotation_layer/{AnnotationLayerID}:
    get:
      tags:
        - Superset APIs (Open Source) > Annotation Layers
      summary: Get an Annotation Layer
      description: >-
        Gets a specific Annotation Layer from a Workspace.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from
        the **Get all Annotation Layers from a Workspace** endpoint.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: AnnotationLayerID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Superset APIs (Open Source) > Annotation Layers
      summary: Update an Annotation Layer
      description: >-
        Updates an Annotation Layer through the API.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from
        the **Get all Annotation Layers from a Workspace** endpoint.
            

        Replace in the body:


        - `{{AnnotationLayerDescription}}` with a description for the Annotation
        Layer.

        - `{{AnnotationLayerName}}` with the desired new name.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                descr: '{{AnnotationLayerDescription}}'
                name: '{{AnnotationLayerName}}'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: AnnotationLayerID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Superset APIs (Open Source) > Annotation Layers
      summary: Delete an Annotation Layer
      description: >-
        Deletes an Annotation Layer through the API.


        **Note:** You can only delete an Annotation Layer, after deleting **all
        its Annotations**.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from
        the **Get all Annotation Layers from a Workspace** endpoint.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: AnnotationLayerID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/annotation_layer/{AnnotationLayerID}/annotation:
    get:
      tags:
        - Superset APIs (Open Source) > Annotation Layers
      summary: Get all Annotations from an Annotation Layer
      description: >-
        Gets all Annotations from a specific Annotation Layer.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from
        the **Get All Annotation Layers from a Workspace** endpoint.
            

        Note that this endpoint returns 20 results by default. You can return up
        to 100 results at a time and use pagination by adding the following
        query parameters:


        ```

        ?q=(page_size:{{PageSize}},page:{{Page}})


        ```


        Replace:


        - `{{PageSize}}` with the desired size (min `1` max `100`).

        - `{{Page}}` with the page number (useful when the total count >
        `{{PageSize}}` - min `0`).
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: AnnotationLayerID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Superset APIs (Open Source) > Annotation Layers
      summary: Create an Annotation in an Annotation Layer
      description: >-
        Creates an Annotation on an existing Annotation Layer through the API.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from
        the **Get all Annotation Layers from a Workspace** endpoint.
            

        Replace in the body:


        - `{{AnnotationEndDTTM}}` with the annotation's datetime end
        (`YYYY-MM-DD HH:MM`).

        - `{{AnnotationLongDescription}}` with the annotation's description.

        - `{{AnnotationTitle}}` with a name for it.

        - `{{AnnotationStartDTTM}}` with the annotation's datetime start
        (`YYYY-MM-DD HH:MM`).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                end_dttm: '{{AnnotationEndDTTM}}'
                json_metadata: ''
                long_descr: '{{AnnotationLongDescription}}'
                short_descr: '{{AnnotationTitle}}'
                start_dttm: '{{AnnotationStartDTTM}}'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: AnnotationLayerID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/annotation_layer/{AnnotationLayerID}/annotation/{AnnotationID}:
    get:
      tags:
        - Superset APIs (Open Source) > Annotation Layers
      summary: Get an Annotation from an Annotation Layer
      description: >-
        Deletes an Annotation Layer through the API.


        **Note:** You can only delete an Annotation Layer, after deleting **all
        its Annotations**.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from
        the **Get all Annotation Layers from a Workspace** endpoint.

        - `{{AnnotationID}}` with the Annotation `id` retrieved from the **Get
        all Annotations from an Annotation Layer** endpoint.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: AnnotationLayerID
          in: path
          schema:
            type: string
          required: true
        - name: AnnotationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Superset APIs (Open Source) > Annotation Layers
      summary: Update an Annotation from an Annotation Layer
      description: >-
        Updates an Annotation from an Annotation Layer through the API.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from
        the **Get all Annotation Layers from a Workspace** endpoint.

        - `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from
        the **Get all Annotation Layers from a Workspace** endpoint.
            

        Replace in the body:


        - `{{AnnotationEndDTTM}}` with the annotation's datetime end
        (`YYYY-MM-DD HH:MM`).

        - `{{AnnotationLongDescription}}` with the annotation's description.

        - `{{AnnotationShortDescription}}` with a name for it.

        - `{{AnnotationStartDTTM}}` with the annotation's datetime start
        (`YYYY-MM-DD HH:MM`).
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                end_dttm: '{{AnnotationEndDTTM}}'
                json_metadata: ''
                long_descr: '{{AnnotationLongDescription}}'
                short_descr: '{{AnnotationTitle}}'
                start_dttm: '{{AnnotationStartDTTM}}'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: AnnotationLayerID
          in: path
          schema:
            type: string
          required: true
        - name: AnnotationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Superset APIs (Open Source) > Annotation Layers
      summary: Delete an Annotation from an Annotation Layer
      description: >-
        Deletes an Annotation from an Annotation Layer through the API.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from
        the **Get all Annotation Layers from a Workspace** endpoint.

        - `{{AnnotationID}}` with the Annotation `id` retrieved from the **Get
        all Annotations from an Annotation Layer** endpoint.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: AnnotationLayerID
          in: path
          schema:
            type: string
          required: true
        - name: AnnotationID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/annotation_layer/{AnnotationLayerID}/annotation/:
    delete:
      tags:
        - Superset APIs (Open Source) > Annotation Layers
      summary: Delete multiple Annotations from an Annotation Layer
      description: >-
        Deletes multiple Annotations from an Annotation Layer through the API.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{AnnotationLayerID}}` with the Annotation Layer `id` retrieved from
        the **Get all Annotation Layers from a Workspace** endpoint.

        - `{{AnnotationIDs}` with comma separated Annotation `ids` retrieved
        from the **Get all Annotations from an Annotation Layer** endpoint.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
        - name: q
          in: query
          schema:
            type: string
          description: Comma separated list of Annotation IDs.
          example: '!({{AnnotationIDs}})'
        - name: AnnotationLayerID
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/report/:
    get:
      tags:
        - Superset APIs (Open Source) > Alerts & Reports
      summary: Get all Reports from a Workspace
      description: >-
        Gets all Reports created on the Workspace.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        Note that the response includes a `count` value, indicating the total
        count of Alerts. 100 alerts would be included on the response - if
        `count > 100`, you can access the remaining items by increasing the
        `page` value on the `q` parameter:


        ```

        ?q=(filters:!((col:type,opr:eq,value:Report)),page_size:{{PageSize}},page:{{Page}})


        ```
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: q
          in: query
          schema:
            type: string
          description: >-
            Used to filter results to include only `Reports`.

            Pagination and page size  are also controlled by this parameter (max
            page size = 100).
          example: (filters:!((col:type,opr:eq,value:Report)),page_size:100,page:0)
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Superset APIs (Open Source) > Alerts & Reports
      summary: Create a Dashboard Alert
      description: >-
        Creates a Dashboard Alert on the Workspace through the API.


        Replace in the URL and on the `Referer` header:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        Replace in the body:


        - `{{ActiveBooleanFlag}}` with:
            - **true** to create it enabled.
            - **false** to create it disabled.
        - `{{AlertName}}` with a name for your alert.

        - `{{DashboardID}}` with the `id` of the desired Dashboard, retrieved
        using the **Get all Dashboards from a Workspace** endpoint.

        - `{{AlertDescription}}` with a description for it.

        - `{{CRONSchedule}}` with the desired frequency (in
        [cron](https://en.wikipedia.org/wiki/Cron)).

        - `{{Timezone}}` with the desired timezone. The list of valid options
        can be retrieved using the **Get Alerts & Reports API metadata Info**
        endpoint.

        - `{{ForceBooleanFlag}}` with:
            - **true** to ignore cache.
            - **false** to use cache if available.
        - `{{DatabaseID}}` with the `id` of the database that should be used to
        execute the SQL validation. You can retrieve this `id` using the **Get
        all Database Connections from a Workspace** endpoint.

        - `{{SQLCondition}}` with the SQL query that should be validated by the
        alert. **Note that the SQL query should return only one column**, for
        example `select count(\\\\\\*) from {{MyTable}}`.

        - `{{ValidatorType}}` with:
            - `operator` when performing number comparisson.
            - `not null` to check if the SQL result is not null. When using `not null`, the `validator_config_json` should be empty:

        ``` json

        "validator_type": "not null",

        "validator_config_json": {}


        ```


        - `{{Operator}}` with the operation that should be used to analyze the
        SQL result. Available options:
            - `==` to check if SQL result is equal the threshold value.
            - `<` to check if the SQL result is smaller than the t
            - the threshold value.
            - `>` to check if the SQL result is larger than the the threshold value.
            - `<=` to check if the SQL result is not larger than the the threshold value.
            - `>=` to check if the SQL result is not smaller than the the threshold value.
            - `!=` to check if the SQL result is different than the threshold value.
        - `{{Threshold}}` with the condition value.

        - For the `owners` field:
            - Replace `{{OwnerID}}` with the owner's account ID on the Workspace level (you can retrieve this ID using the **Get all possible Chart Owners** endpoint).
            - This field is an array, so multiple owners can be added, separated by comma.
        - For the `recipients` field:
            - Replace `{{ReportType}}` with `Email` or `Slack`.
            - `{{TargetInfo}}` with the email address/Slack user handler.
            - This field is an array, so multiple recipient configuration can be added (comma separated).
        - `{{LogRetention}}` with the retention period (in days). Default and
        max value is `90`_._

        - `{{WorkingTimeout}}` with time out settings (in seconds). Default
        value is `3600`.

        - `{{GracePeriod}}` with a grace period (in seconds). Default value is
        `14400`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example: |-
                {
                    "active": {{ActiveBooleanFlag}},
                    "creation_method": "alerts_reports",
                    "type": "Alert",
                    "name": "{{AlertName}}",
                    "dashboard": {{DashboardID}},
                    "description": "{{AlertDescription}}",
                    "crontab": "{{CRONSchedule}}",
                    "timezone": "{{Timezone}}",
                    "force_screenshot": {{ForceBooleanFlag}},
                    "report_format": "PNG",
                    "database": {{DatabaseID}},
                    "sql": {{SQLCondition}},
                    "validator_type": "{{ValidatorType}}",
                    "validator_config_json": {
                        "op": "{{Operator}}",
                        "threshold": "{{Threshold}}"
                    },
                    "owners": [
                        {{OwnerID}}
                    ],
                    "recipients": [
                        {
                            "type": "{{ReportType}}",
                            "recipient_config_json": {
                                "target": "{{TargetInfo}}"
                            }
                        }
                    ],
                    "log_retention": {{LogRetention}},
                    "working_timeout": {{WorkingTimeout}},
                    "grace_period": {{GracePeriod}}
                }
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
        - name: Referer
          in: header
          schema:
            type: string
          example: https://{{WorkspaceSlug}}.{{WorkspaceRegion}}.app.preset.io/
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/report/{AlertID OR ReportID}:
    get:
      tags:
        - Superset APIs (Open Source) > Alerts & Reports
      summary: Get an Alert/Report
      description: "Gets a specific Alert/Report from the Workspace.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}`\_with the\_`name`\_retrieved through the API (using the\_**Get Workspaces from a Team**\_endpoint).\n- `{{WorkspaceRegion}}`\_corresponding to the\_`region`\_retrieved from the\_**Get Workspaces from a Team**\_endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the\_`{{WorkspaceSlug}}`\_and\_`{{WorkspaceRegion}}`\_from the URL ->\_`https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.\n\n- `{{AlertID OR ReportID}}`\_with the\_`id`\_retrieved from one of the endpoints below:\n    - **Get all Alerts and Reports from a Workspace**\n    - **Get all Alerts from a Workspace**\n    - **Get all Reports from a Workspace**"
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Superset APIs (Open Source) > Alerts & Reports
      summary: Disable an Alert/Report
      description: >-
        Disables a specific Alert/Report from the Workspace.


        Replace in the URL:


        - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        - `{{WorkspaceRegion}}` corresponding to the `region` retrieved from the
        **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        - `{{AlertID OR ReportID}}` with the `id` retrieved from one of the
        endpoints below:
            - **Get all Alerts and Reports from a Workspace**
            - **Get all Alerts from a Workspace**
            - **Get all Reports from a Workspace**
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                active: false
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/report/_info:
    get:
      tags:
        - Superset APIs (Open Source) > Alerts & Reports
      summary: Get Alerts & Reports API metadata Info
      description: "Gets metadata information about the Alerts & Reports API endpoints.\n\nReplace in the URL:\n\n- `{{WorkspaceSlug}}`\_with the\_`name`\_retrieved through the API (using the\_**Get Workspaces from a Team**\_endpoint).\n- `{{WorkspaceRegion}}`\_corresponding to the\_`region`\_retrieved from the\_**Get Workspaces from a Team**\_endpoint. Refer to below table:\n    \n\n| **`region`** | **`WorkspaceRegion`** |\n| --- | --- |\n| us-east-1 | `us2a` |\n| us-west-2 | `us1a` |\n| eu-north-1 | `eu5a` |\n| ap-northeast-1 | `ap1a` |\n\nAlternatively, access the Workspace through the UI, and get the\_`{{WorkspaceSlug}}`\_and\_`{{WorkspaceRegion}}`\_from the URL ->\_`https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`."
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/query/:
    get:
      tags:
        - Superset APIs (Open Source) > Queries
      summary: Get All Workspace Queries
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/assets/export/:
    get:
      tags:
        - Superset APIs (Open Source) > Assets
      summary: Export Assets
      description: >-
        Generates and export a ZIP file from the Workspace containing all:


        *   Databases

        *   Datasets

        *   Charts

        *   Dashboards

        *   Saved Queries
            

        Replace in the URL:


        *   `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        *   `{{WorkspaceRegion}}` corresponding to the `region` retrieved from
        the **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        ***Tip:*** If used in Postman, select `Save Response` and `Save to a
        File` to get the zip export.
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/zip
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /api/v1/assets/import/:
    post:
      tags:
        - Superset APIs (Open Source) > Assets
      summary: Import Assets
      description: >-
        Imports an `assets` ZIP file.


        Replace in the URL:


        *   `{{WorkspaceSlug}}` with the `name` retrieved through the API (using
        the **Get Workspaces from a Team** endpoint).

        *   `{{WorkspaceRegion}}` corresponding to the `region` retrieved from
        the **Get Workspaces from a Team** endpoint. Refer to below table:
            

        | **`region`** | **`WorkspaceRegion`** |

        | --- | --- |

        | us-east-1 | `us2a` |

        | us-west-2 | `us1a` |

        | eu-north-1 | `eu5a` |

        | ap-northeast-1 | `ap1a` |


        Alternatively, access the Workspace through the UI, and get the
        `{{WorkspaceSlug}}` and `{{WorkspaceRegion}}` from the URL ->
        `https://{{WorkspaceSlug}}.{{Region}}.preset.io/superset/welcome/`.


        Replace in the body:


        *   `{{DatabaseYAMLFile}}` by the database YAML File you can find in
        your chart export under the folder `Databases`.

        *   `{{DatabasePassword}}` by your database password

        *   Chose your Chart Export Zip file as a value for the `formData`.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                bundle:
                  type: string
                  format: binary
                passwords:
                  type: string
                  example: '{"databases/{{DatabaseYAMLFile}}": "{{DatabasePassword}}"}'
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: Bearer {{JWTToken}}
        - name: Accept
          in: header
          schema:
            type: string
          example: application/json
        - name: Content-Type
          in: header
          schema:
            type: string
          example: multipart/form-data;
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
