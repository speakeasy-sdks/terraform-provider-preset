// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package provider

import (
	"context"
	"github.com/Preset/terraform-provider-Preset/internal/sdk"
	"github.com/Preset/terraform-provider-Preset/internal/sdk/pkg/models/shared"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/provider"
	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

var _ provider.Provider = &PresetProvider{}

type PresetProvider struct {
	// version is set to the provider version on release, "dev" when the
	// provider is built and ran locally, and "test" when running acceptance
	// testing.
	version string
}

// PresetProviderModel describes the provider data model.
type PresetProviderModel struct {
	ServerURL  types.String `tfsdk:"server_url"`
	BearerAuth types.String `tfsdk:"bearer_auth"`
}

func (p *PresetProvider) Metadata(ctx context.Context, req provider.MetadataRequest, resp *provider.MetadataResponse) {
	resp.TypeName = "Preset"
	resp.Version = p.version
}

func (p *PresetProvider) Schema(ctx context.Context, req provider.SchemaRequest, resp *provider.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: `Preset API: Welcome to the Preset API Collection.` + "\n" +
			`` + "\n" +
			`## Overview` + "\n" +
			`` + "\n" +
			`The Preset REST API is a powerful feature that provides access to core functional aspects of both Preset Manager and Superset.` + "\n" +
			`` + "\n" +
			`The API supports the following areas of Preset:` + "\n" +
			`` + "\n" +
			`*   User and Team Management` + "\n" +
			`*   Workspace Management` + "\n" +
			`*   Connection and Data Management` + "\n" +
			`*   Visualization Management` + "\n" +
			`*   Permissions Management \[Beta\]` + "\n" +
			`    ` + "\n" +
			`` + "\n" +
			`This documentation lists the most relevant endpoints across all of the above functional areas of Preset.` + "\n" +
			`` + "\n" +
			`## Authentication` + "\n" +
			`` + "\n" +
			`### Generate an API Key` + "\n" +
			`` + "\n" +
			`To generate an API key, from the Preset Manager screen (after log-in), hover your cursor over the initials icon and, in the sub-menu, select Manage User Settings.` + "\n" +
			`` + "\n" +
			`![](https://i.ibb.co/D1xHc92/api1.png)` + "\n" +
			`` + "\n" +
			`In the *API Keys* section, select **\+ Generate New API Key**` + "\n" +
			`` + "\n" +
			`![](https://i.ibb.co/LRWp7HC/api2.png)` + "\n" +
			`` + "\n" +
			`The *Generate a New API Key* panel appears.` + "\n" +
			`` + "\n" +
			`In the **Key Title** field, enter a name for the new API key.` + "\n" +
			`` + "\n" +
			`In the **Key Description** field, enter a brief descripton of the API key.` + "\n" +
			`` + "\n" +
			`Select **Submit**.` + "\n" +
			`` + "\n" +
			`![](https://i.ibb.co/cC0H4mY/api3.png)` + "\n" +
			`` + "\n" +
			`The **Token** field will automatically populate with a generated token.` + "\n" +
			`` + "\n" +
			`Likewise, the **Secret** field will automatically populate with a secret.` + "\n" +
			`` + "\n" +
			`![](https://i.ibb.co/8smp5pZ/api5.png)` + "\n" +
			`` + "\n" +
			`*Reminder: Safeguard the Secret**Please take a moment to select the Copy icon and then safely store it.*` + "\n" +
			`` + "\n" +
			`When ready, select **OK**.` + "\n" +
			`` + "\n" +
			`![](https://i.ibb.co/LdNDGNp/api6.png)` + "\n" +
			`` + "\n" +
			`The newly-created API key appears in the *API Keys* section.` + "\n" +
			`` + "\n" +
			`By default, the API key will be activated â€” to deactivate, toggle the **Active** slider to the off position.` + "\n" +
			`` + "\n" +
			`To delete an API key, select the trash bin icon.` + "\n" +
			`` + "\n" +
			`### Using the Postman Collection` + "\n" +
			`` + "\n" +
			`All requests on this collection inherit the **token** specified on the **Preset API** collection.` + "\n" +
			`` + "\n" +
			`To authenticate:` + "\n" +
			`` + "\n" +
			`1.  Click on the **Preset API Collection**.` + "\n" +
			`2.  Navigate to the **Variables** tab.` + "\n" +
			`3.  Provide your **API Token** on the ` + "`" + `APITokenName` + "`" + ` current value.` + "\n" +
			`4.  Provide the **API Token Secret** on the ` + "`" + `APITokenSecret` + "`" + ` current value.` + "\n" +
			`    ` + "\n" +
			`` + "\n" +
			`These would be used to generate a **JWT Token** that's stored as a **Global Variable**.` + "\n" +
			`` + "\n" +
			`There's a script defined on this collection, that is always executed before any request. The script basically checks if there's a valid **JWT Token** and tries to generate one/refresh it if needed.` + "\n" +
			`` + "\n" +
			`* * *` + "\n" +
			`` + "\n" +
			`### Manually using the API` + "\n" +
			`` + "\n" +
			`Use the **Get a JWT Token** request to generate a ` + "`" + `JWT Token.` + "`" + ``,
		Attributes: map[string]schema.Attribute{
			"server_url": schema.StringAttribute{
				MarkdownDescription: "Server URL (defaults to https://api.app.preset.io)",
				Optional:            true,
				Required:            false,
			},
			"bearer_auth": schema.StringAttribute{
				Optional:  true,
				Sensitive: true,
			},
		},
	}
}

func (p *PresetProvider) Configure(ctx context.Context, req provider.ConfigureRequest, resp *provider.ConfigureResponse) {
	var data PresetProviderModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	ServerURL := data.ServerURL.ValueString()

	if ServerURL == "" {
		ServerURL = "https://api.app.preset.io"
	}

	bearerAuth := data.BearerAuth.ValueString()
	security := shared.Security{
		BearerAuth: bearerAuth,
	}

	opts := []sdk.SDKOption{
		sdk.WithServerURL(ServerURL),
		sdk.WithSecurity(security),
	}
	client := sdk.New(opts...)

	resp.DataSourceData = client
	resp.ResourceData = client
}

func (p *PresetProvider) Resources(ctx context.Context) []func() resource.Resource {
	return []func() resource.Resource{}
}

func (p *PresetProvider) DataSources(ctx context.Context) []func() datasource.DataSource {
	return []func() datasource.DataSource{}
}

func New(version string) func() provider.Provider {
	return func() provider.Provider {
		return &PresetProvider{
			version: version,
		}
	}
}
