// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"Preset/internal/sdk/pkg/models/operations"
	"Preset/internal/sdk/pkg/utils"
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
)

// presetManagerAPIsGreaterThanWorkspaces - APIs to manage your Workspaces.
type presetManagerAPIsGreaterThanWorkspaces struct {
	sdkConfiguration sdkConfiguration
}

func newPresetManagerAPIsGreaterThanWorkspaces(sdkConfig sdkConfiguration) *presetManagerAPIsGreaterThanWorkspaces {
	return &presetManagerAPIsGreaterThanWorkspaces{
		sdkConfiguration: sdkConfig,
	}
}

// GetV1TeamsTeamSlugWorkspaces - Get Workspaces from a Team
// Gets all Workspaces from the Team.
//
// Replace in the URL:
//
// *   `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
func (s *presetManagerAPIsGreaterThanWorkspaces) GetV1TeamsTeamSlugWorkspaces(ctx context.Context, request operations.GetV1TeamsTeamSlugWorkspacesRequest) (*operations.GetV1TeamsTeamSlugWorkspacesResponse, error) {
	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	url, err := utils.GenerateURL(ctx, baseURL, "/v1/teams/{TeamSlug}/workspaces", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "*/*")
	req.Header.Set("user-agent", s.sdkConfiguration.UserAgent)

	utils.PopulateHeaders(ctx, req, request)

	client := s.sdkConfiguration.SecurityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetV1TeamsTeamSlugWorkspacesResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// GetV1TeamsTeamSlugWorkspacesWorkspaceIDMemberships - Get Workspace Users and Roles
// Gets Users and their Workspace Roles from the Workspace.
//
// Replace in the URL:
//
// *   `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
//
// *   `{{WorkspaceID}}` with the `id` retrieved through the API with the **Get Workspaces from a Team** endpoint.
func (s *presetManagerAPIsGreaterThanWorkspaces) GetV1TeamsTeamSlugWorkspacesWorkspaceIDMemberships(ctx context.Context, request operations.GetV1TeamsTeamSlugWorkspacesWorkspaceIDMembershipsRequest) (*operations.GetV1TeamsTeamSlugWorkspacesWorkspaceIDMembershipsResponse, error) {
	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	url, err := utils.GenerateURL(ctx, baseURL, "/v1/teams/{TeamSlug}/workspaces/{WorkspaceID}/memberships", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "*/*")
	req.Header.Set("user-agent", s.sdkConfiguration.UserAgent)

	utils.PopulateHeaders(ctx, req, request)

	client := s.sdkConfiguration.SecurityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetV1TeamsTeamSlugWorkspacesWorkspaceIDMembershipsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// PostV1TeamsTeamSlugWorkspaces - Create Workspace for a Team
// ###### *Requires admin permission.*
//
// Creates a new Workspace on the Team.
//
// Replace in the URL:
//
// *   `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
//
// Replace in the Body:
//
// *   `{{NewWorkspaceTitle}}` by the title of the New Workspace you want to create.
// *   `{{NewWorkspaceRegion}}` with the region that the Workspace should be created - refer to below table:
//
// | Location | `NewWorkspaceRegion` |
// | --- | --- |
// | **US East Cost** | `us-east-1` |
// | **US West Coast** | `us-west-2` |
// | **Europe** | `eu-north-1` |
// | **Asia-Pacific** | `ap-northeast-1` |
func (s *presetManagerAPIsGreaterThanWorkspaces) PostV1TeamsTeamSlugWorkspaces(ctx context.Context, request operations.PostV1TeamsTeamSlugWorkspacesRequest) (*operations.PostV1TeamsTeamSlugWorkspacesResponse, error) {
	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	url, err := utils.GenerateURL(ctx, baseURL, "/v1/teams/{TeamSlug}/workspaces", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, false, true, "RequestBody", "json", `request:"mediaType=application/json"`)
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	debugBody := bytes.NewBuffer([]byte{})
	debugReader := io.TeeReader(bodyReader, debugBody)

	req, err := http.NewRequestWithContext(ctx, "POST", url, debugReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "*/*")
	req.Header.Set("user-agent", s.sdkConfiguration.UserAgent)

	req.Header.Set("Content-Type", reqContentType)

	utils.PopulateHeaders(ctx, req, request)

	client := s.sdkConfiguration.SecurityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Request.Body = io.NopCloser(debugBody)
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostV1TeamsTeamSlugWorkspacesResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// PutV1TeamsTeamSlugWorkspacesWorkspaceIDMembership - Change Workspace Role
// Changes a user's Workspace Role.
//
// Replace in the URL:
//
// - `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
//
// - `{{WorkspaceID}}` with the `id` retrieved through the API with the **Get Workspaces from a Team** endpoint.
//
// Replace in the body:
//
// - `{{UserID}}`with the `id` retrieved using the **Get Team Members** endpoint.
//
// - `{{RoleIdentifier}}`with one of the the `role_identifier` below, wrapped in double quotes:
//
// | **Workspace Role** | **role_identifier** |
// | --- | --- |
// | Workspace Admin | "Admin" |
// | Primary Contributor | "PresetAlpha" |
// | Secondary Contributor | "PresetBeta" |
// | Limited Contributor | "PresetGamma" |
// | Viewer | "PresetReportsOnly" |
// | Dashboard Viewer | "PresetDashboardsOnly" |
// | No Access | "PresetNoAccess" |
//
// Each Role Identifier corresponds to a specific Workspace Role. As a reminder, the access restrictions for each Workspace Role can be found [in our documentation](https://docs.preset.io/docs/data-access-roles-at-preset).
func (s *presetManagerAPIsGreaterThanWorkspaces) PutV1TeamsTeamSlugWorkspacesWorkspaceIDMembership(ctx context.Context, request operations.PutV1TeamsTeamSlugWorkspacesWorkspaceIDMembershipRequest) (*operations.PutV1TeamsTeamSlugWorkspacesWorkspaceIDMembershipResponse, error) {
	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	url, err := utils.GenerateURL(ctx, baseURL, "/v1/teams/{TeamSlug}/workspaces/{WorkspaceID}/membership", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, false, true, "RequestBody", "json", `request:"mediaType=application/json"`)
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	debugBody := bytes.NewBuffer([]byte{})
	debugReader := io.TeeReader(bodyReader, debugBody)

	req, err := http.NewRequestWithContext(ctx, "PUT", url, debugReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "*/*")
	req.Header.Set("user-agent", s.sdkConfiguration.UserAgent)

	req.Header.Set("Content-Type", reqContentType)

	utils.PopulateHeaders(ctx, req, request)

	client := s.sdkConfiguration.SecurityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Request.Body = io.NopCloser(debugBody)
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PutV1TeamsTeamSlugWorkspacesWorkspaceIDMembershipResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}
