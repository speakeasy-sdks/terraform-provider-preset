// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package sdk

import (
	"Preset/internal/sdk/pkg/models/operations"
	"Preset/internal/sdk/pkg/utils"
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
)

// PresetManagerAPIsGreaterThanPermissions - APIs to manage permissions on the Workspace level.
//
// Note that all Permission APIs require **Team Admin** permission.
type PresetManagerAPIsGreaterThanPermissions struct {
	sdkConfiguration sdkConfiguration
}

func newPresetManagerAPIsGreaterThanPermissions(sdkConfig sdkConfiguration) *PresetManagerAPIsGreaterThanPermissions {
	return &PresetManagerAPIsGreaterThanPermissions{
		sdkConfiguration: sdkConfig,
	}
}

// DeleteV1TeamsTeamSlugPermissionsPermissionName - Delete Row Level Security
// ###### _Requires Team Admin permission._
//
// Deletes a Row Level Security (RLS).
//
// Replace in the URL:
//
// - `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
// - `{{PermissionName}}` with the `name` retrieved via the **Get Permissions** API.
func (s *PresetManagerAPIsGreaterThanPermissions) DeleteV1TeamsTeamSlugPermissionsPermissionName(ctx context.Context, request operations.DeleteV1TeamsTeamSlugPermissionsPermissionNameRequest) (*operations.DeleteV1TeamsTeamSlugPermissionsPermissionNameResponse, error) {
	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	url, err := utils.GenerateURL(ctx, baseURL, "/v1/teams/{TeamSlug}/permissions/{PermissionName}", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "*/*")
	req.Header.Set("user-agent", s.sdkConfiguration.UserAgent)

	utils.PopulateHeaders(ctx, req, request)

	client := s.sdkConfiguration.SecurityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DeleteV1TeamsTeamSlugPermissionsPermissionNameResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// DeleteV1TeamsTeamSlugPermissionsPermissionNameGrantees - Delete Grantee from existing Permission
// ###### _Requires Team Admin permission._
//
// Removes Grantee(s) from an existing Permission (DAR or RLS).
//
// Replace in the URL:
//
// - `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
// - `{{PermissionName}}` with the `name` retrieved via the **Get Permissions** API.
//
// Replace in the body:
//
// - `{{GranteeType}}` with:
//   - `USER` to add users to DARs.
//   - `ROLE` to add DAR to RLS.
//
// - `{{GranteeIdentifier}}` with:
//   - `username` when adding users to DAR. You can get a list of `usernames` with the **Get Team Members** API.
//   - `DAR Name` when adding DAR to RLS. You can get a list of availabe DARs using the **Get Permissions** endpoint. Note that you would use the **display name** (without `dar:`).
func (s *PresetManagerAPIsGreaterThanPermissions) DeleteV1TeamsTeamSlugPermissionsPermissionNameGrantees(ctx context.Context, request operations.DeleteV1TeamsTeamSlugPermissionsPermissionNameGranteesRequest) (*operations.DeleteV1TeamsTeamSlugPermissionsPermissionNameGranteesResponse, error) {
	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	url, err := utils.GenerateURL(ctx, baseURL, "/v1/teams/{TeamSlug}/permissions/{PermissionName}/grantees", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "DELETE", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "*/*")
	req.Header.Set("user-agent", s.sdkConfiguration.UserAgent)

	utils.PopulateHeaders(ctx, req, request)

	client := s.sdkConfiguration.SecurityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.DeleteV1TeamsTeamSlugPermissionsPermissionNameGranteesResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// GetV1TeamsTeamSlugPermissions - Get Permissions
// ###### _Requires Team Admin permission._
//
// List all permissions from a team.
//
// Replace in the URL:
//
// - `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
//
// Note that the query parameters are optional and very useful to retrieve the desired data:
//
// - `workspace_name` can be used to filter for permissions only applied to a particular Workspace.
// - `permission_type` can be used to filter for only `data_access_role`, or `row_level_security`.
// - `grantee_identifier` can be used to filter for all permissions included in a DAR (`dar:{{DAR NAME}}`), or all permissions applied to a user (`username`).
func (s *PresetManagerAPIsGreaterThanPermissions) GetV1TeamsTeamSlugPermissions(ctx context.Context, request operations.GetV1TeamsTeamSlugPermissionsRequest) (*operations.GetV1TeamsTeamSlugPermissionsResponse, error) {
	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	url, err := utils.GenerateURL(ctx, baseURL, "/v1/teams/{TeamSlug}/permissions", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "*/*")
	req.Header.Set("user-agent", s.sdkConfiguration.UserAgent)

	utils.PopulateHeaders(ctx, req, request)

	client := s.sdkConfiguration.SecurityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetV1TeamsTeamSlugPermissionsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// GetV1TeamsTeamSlugPermissionsResources - Get Resources
// ###### _Requires Team Admin permission._
//
// List all resources from a team.
//
// Replace in the URL:
//
// - `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
//
// Note that the query parameters are optional and very useful to retrieve the desired data:
//
// - `workspace_name` can be used to filter for permissions only applied to a particular Workspace.
// - `resource_type` can be used to filter for:
//   - `database` to list databases
//   - `database_schema` to list schemas
//   - `datasource` to list DAR permission reference of a dataset (not the dataset itself)
//   - `dataset` to list datasets
//   - `data_access_role` to list DARs
//   - `row_level_security` to list RLSs
func (s *PresetManagerAPIsGreaterThanPermissions) GetV1TeamsTeamSlugPermissionsResources(ctx context.Context, request operations.GetV1TeamsTeamSlugPermissionsResourcesRequest) (*operations.GetV1TeamsTeamSlugPermissionsResourcesResponse, error) {
	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	url, err := utils.GenerateURL(ctx, baseURL, "/v1/teams/{TeamSlug}/permissions/resources", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "*/*")
	req.Header.Set("user-agent", s.sdkConfiguration.UserAgent)

	utils.PopulateHeaders(ctx, req, request)

	client := s.sdkConfiguration.SecurityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.GetV1TeamsTeamSlugPermissionsResourcesResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// PatchV1TeamsTeamSlugPermissionsPermissionName - Update Row Level Security
// ###### _Requires Team Admin permission._
//
// Updates an existing Row Level Security (RLS).
//
// Replace in the URL:
//
// - `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
// - `{{PermissionName}}` with the `name` retrieved via the **Get Permissions** API.
//
// Note that the payload has to be complete - you can't remove the `grantees`.
//
// Replace in the body:
//
// - `{{DARName1}}` with the DAR name you want to associated with this RLS (also for `{{DARName2}}` and so on). You can get a list of availabe DARs using the **Get Permissions** endpoint. Note that you would use the **display name** (without `dar:`).
// - `{{RLSName}}` with the name of your RLS.
// - `{{RLSClause}}` with the SQL syntax for the filter to be applied.
// - `{{RLSFilterType}}` with `Regular` or `Base`.
// - `{{RLSGroupKey}}` with the desired group key.
// - `{{ResourceName}}` with the datasource name. You can get a list of available options using the **Get Resources** endpoint (filtering for `&resource_type=datasource`).
// - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).
//
// _Please note:_
//
// - _**Grantee list for RLS permissions create/update is limited to 100 users in total (API will respond with 400 if over the limit)**_
func (s *PresetManagerAPIsGreaterThanPermissions) PatchV1TeamsTeamSlugPermissionsPermissionName(ctx context.Context, request operations.PatchV1TeamsTeamSlugPermissionsPermissionNameRequest) (*operations.PatchV1TeamsTeamSlugPermissionsPermissionNameResponse, error) {
	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	url, err := utils.GenerateURL(ctx, baseURL, "/v1/teams/{TeamSlug}/permissions/{PermissionName}", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, false, true, "RequestBody", "json", `request:"mediaType=application/json"`)
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	debugBody := bytes.NewBuffer([]byte{})
	debugReader := io.TeeReader(bodyReader, debugBody)

	req, err := http.NewRequestWithContext(ctx, "PATCH", url, debugReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "*/*")
	req.Header.Set("user-agent", s.sdkConfiguration.UserAgent)

	req.Header.Set("Content-Type", reqContentType)

	utils.PopulateHeaders(ctx, req, request)

	client := s.sdkConfiguration.SecurityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Request.Body = io.NopCloser(debugBody)
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PatchV1TeamsTeamSlugPermissionsPermissionNameResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// PostV1TeamsTeamSlugPermissions - Create Row Level Security
// ###### _Requires Team Admin permission._
//
// Creates a Row Level Security (RLS).
//
// Replace in the URL:
//
// - `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
//
// Replace in the body:
//
// - `{{DARName1}}` with the DAR name you want to associated with this RLS (also for `{{DARName2}}` and so on). You can get a list of availabe DARs using the **Get Permissions** endpoint. Note that you would use the **display name** (without `dar:`).
// - `{{RLSName}}` with the name of your RLS.
// - `{{RLSClause}}` with the SQL syntax for the filter to be applied.
// - `{{RLSFilterType}}` with `Regular` or `Base`.
// - `{{RLSGroupKey}}` with the desired group key.
// - `{{ResourceName}}` with the datasource name. You can get a list of available options using the **Get Resources** endpoint (filtering for `&resource_type=datasource`).
// - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).
//
// Please note:
//
// - _**Grantee list for RLS permissions create/update is limited to 100 users in total (API will respond with 400 if over the limit)**_
func (s *PresetManagerAPIsGreaterThanPermissions) PostV1TeamsTeamSlugPermissions(ctx context.Context, request operations.PostV1TeamsTeamSlugPermissionsRequest) (*operations.PostV1TeamsTeamSlugPermissionsResponse, error) {
	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	url, err := utils.GenerateURL(ctx, baseURL, "/v1/teams/{TeamSlug}/permissions/", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, false, true, "RequestBody", "json", `request:"mediaType=application/json"`)
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	debugBody := bytes.NewBuffer([]byte{})
	debugReader := io.TeeReader(bodyReader, debugBody)

	req, err := http.NewRequestWithContext(ctx, "POST", url, debugReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "*/*")
	req.Header.Set("user-agent", s.sdkConfiguration.UserAgent)

	req.Header.Set("Content-Type", reqContentType)

	utils.PopulateHeaders(ctx, req, request)

	client := s.sdkConfiguration.SecurityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Request.Body = io.NopCloser(debugBody)
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostV1TeamsTeamSlugPermissionsResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}

// PostV1TeamsTeamSlugPermissionsPermissionNameGrantees - Add Grantees to existing Permission
// ###### _Requires Team Admin permission._
//
// Adds Grantee(s) to an existing Permission (DAR or RLS).
//
// Replace in the URL:
//
// - `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
// - `{{PermissionName}}` with the `name` retrieved via the **Get Permissions** API.
//
// Replace in the body:
//
// - `{{GranteeType}}` with:
//   - `USER` to add existing user to DARs.
//   - `INVITEE` to add pending user to DARs
//   - `ROLE` to add DAR to RLS.
//
// - `{{GranteeIdentifier}}` with:
//   - `username` when adding users to DAR. You can get a list of `usernames` with the **Get Team Members** API. For pending users you can use their email.
//   - `DAR Name` when adding DAR to RLS. You can get a list of availabe DARs using the **Get Permissions** endpoint. Note that you would use the **display name** (without `dar:`).
//
// Please note:
//
// - _**Max number of grantees to be appended per request is 100.**_
// - _**Duplicate grantees will be ignored.**_
func (s *PresetManagerAPIsGreaterThanPermissions) PostV1TeamsTeamSlugPermissionsPermissionNameGrantees(ctx context.Context, request operations.PostV1TeamsTeamSlugPermissionsPermissionNameGranteesRequest) (*operations.PostV1TeamsTeamSlugPermissionsPermissionNameGranteesResponse, error) {
	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	url, err := utils.GenerateURL(ctx, baseURL, "/v1/teams/{TeamSlug}/permissions/{PermissionName}/grantees", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, false, true, "RequestBody", "json", `request:"mediaType=application/json"`)
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}
	debugBody := bytes.NewBuffer([]byte{})
	debugReader := io.TeeReader(bodyReader, debugBody)

	req, err := http.NewRequestWithContext(ctx, "POST", url, debugReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "*/*")
	req.Header.Set("user-agent", s.sdkConfiguration.UserAgent)

	req.Header.Set("Content-Type", reqContentType)

	utils.PopulateHeaders(ctx, req, request)

	client := s.sdkConfiguration.SecurityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Request.Body = io.NopCloser(debugBody)
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostV1TeamsTeamSlugPermissionsPermissionNameGranteesResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}
	switch {
	case httpRes.StatusCode == 200:
	}

	return res, nil
}
